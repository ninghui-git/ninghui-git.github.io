{"total":15,"pageSize":10,"pageCount":2,"data":[{"title":"","slug":"第一篇博客","date":"2021-03-10T14:42:05.680Z","updated":"2021-03-11T04:47:07.976Z","comments":true,"path":"api/articles/第一篇博客.json","excerpt":"","keywords":null,"cover":null,"content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 我的第一篇博客</span><br><span class=\"line\">date: 2020-06-08 17:17:58</span><br><span class=\"line\">tags:</span><br></pre></td></tr></table></figure>\n\n","text":"1<br>2<br>3<br>title: 我的第一篇博客<br>date: 2020-06-08 17:17:58<br>tags:<br>","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2021-03-10T14:21:35.062Z","updated":"2021-03-10T14:21:35.062Z","comments":true,"path":"api/articles/hello-world.json","excerpt":"","keywords":null,"cover":null,"content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"React 的7中怪异代码","slug":"React-的7中怪异代码","date":"2020-12-08T09:53:56.000Z","updated":"2021-03-08T09:54:47.245Z","comments":true,"path":"api/articles/React-的7中怪异代码.json","excerpt":"","keywords":null,"cover":null,"content":"<p> 阅读本文可能花费您 9 分钟</p>\n<p>教你如何更好地写 React。</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>原文链接：<a href=\"https://dev.to/awnton/7-code-smells-in-react-components-5f66\">7 code smells in your React components</a></p>\n<p>作者信息：<a href=\"https://twitter.com/Awnton\">Anton Gunnarsson</a></p>\n<p>翻译许可：</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>自从使用 <code>React</code> 后，我见过越来越多可值得优化的点，比如：</p>\n<ul>\n<li>大量的 <code>props</code></li>\n<li><code>props</code> 的不兼容性</li>\n<li><code>props</code> 复制为 <code>state</code></li>\n<li>返回 <code>JSX</code> 的函数</li>\n<li><code>state</code> 的多个状态</li>\n<li><code>useState</code> 过多</li>\n<li>复杂的 <code>useEffect</code></li>\n</ul>\n<p>在本文中，我想分享几个技巧，这些技巧将改善你的 React 代码。</p>\n<h3 id=\"大量的-props\"><a href=\"#大量的-props\" class=\"headerlink\" title=\"大量的 props\"></a>大量的 props</h3><p>如果需要把大量的 <code>props</code> 传递到一个组件中，那么很有可能 该组件可再进一步拆分。</p>\n<p>问题来了，“大量” 具体是多少呢？答案是 看情况。</p>\n<p>假设你正在开发 一个包含 20 个或更多 <code>props</code> 的组件时，你想再添加一些 <code>props</code> 完善其他功能，这时有两点可以参考 是否应拆分组件：</p>\n<p><strong>该组件是否做了多件事？</strong></p>\n<p>像函数一样，一个组件应该只做好一件事，所以考虑下 将组件拆分成多个小组件是否会更好。</p>\n<p>例如，该组件存在 <a href=\"https://tomotoes.com/blog/7-code-smells-in-react-components/\"><code>props</code> 的不兼容性</a> 或 <a href=\"https://tomotoes.com/blog/7-code-smells-in-react-components/\">返回 <code>JSX</code> 的函数</a>。</p>\n<p><strong>该组件是否可被合成</strong>？</p>\n<p>开发中，组合是一种很好的模式但经常被忽视。</p>\n<p>如果你的组件中存在将不相干逻辑塞到一起的情况，是时候考虑使用组合了。</p>\n<p>假设我们有一个表单组件来处理某组织的用户信息:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY&lt;ApplicationForm</span><br><span class=\"line\">  user&#x3D;&#123;userData&#125;</span><br><span class=\"line\">  organization&#x3D;&#123;organizationData&#125;</span><br><span class=\"line\">  categories&#x3D;&#123;categoriesData&#125;</span><br><span class=\"line\">  locations&#x3D;&#123;locationsData&#125;</span><br><span class=\"line\">  onSubmit&#x3D;&#123;handleSubmit&#125;</span><br><span class=\"line\">  onCancel&#x3D;&#123;handleCancel&#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#x2F;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>通过该组件的 <code>props</code> ，我们可看到它们都与组件提供的功能密切相关。</p>\n<p>该组件看起来并无大碍，但如果将其中的一些 <code>props</code> 分担到子组件，那么数据流就会更清晰。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY&lt;ApplicationForm onSubmit&#x3D;&#123;handleSubmit&#125; onCancel&#x3D;&#123;handleCancel&#125;&gt;</span><br><span class=\"line\">  &lt;ApplicationUserForm user&#x3D;&#123;userData&#125; &#x2F;&gt;</span><br><span class=\"line\">  &lt;ApplicationOrganizationForm organization&#x3D;&#123;organizationData&#125; &#x2F;&gt;</span><br><span class=\"line\">  &lt;ApplicationCategoryForm categories&#x3D;&#123;categoriesData&#125; &#x2F;&gt;</span><br><span class=\"line\">  &lt;ApplicationLocationsForm locations&#x3D;&#123;locationsData&#125; &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;ApplicationForm&gt;</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们已经看到该表单组件只处理提交和取消动作，其他范围内的事情，都交给了对应的子组件。</p>\n<p><strong>是否传递了很多有关配置的 props</strong></p>\n<p>在某些情况下，将多个有关配置的 <code>props</code> 组合成一个 <code>options</code> 是个不错的实践。</p>\n<p>假设我们有一个可显示某种表格的组件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY&lt;Grid</span><br><span class=\"line\">  data&#x3D;&#123;gridData&#125;</span><br><span class=\"line\">  pagination&#x3D;&#123;false&#125;</span><br><span class=\"line\">  autoSize&#x3D;&#123;true&#125;</span><br><span class=\"line\">  enableSort&#x3D;&#123;true&#125;</span><br><span class=\"line\">  sortOrder&#x3D;&quot;desc&quot;</span><br><span class=\"line\">  disableSelection&#x3D;&#123;true&#125;</span><br><span class=\"line\">  infiniteScroll&#x3D;&#123;true&#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#x2F;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以很清楚地看出，该组件除了 <code>data</code> 外其余的 <code>props</code> 都是与配置有关的。</p>\n<p>如果将多个配置 <code>props</code> 合成为一个 <code>options</code> ，就可更好地控制组件的选项，规范性也得到提升。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPYconst options &#x3D; &#123;</span><br><span class=\"line\">  pagination: false,</span><br><span class=\"line\">  autoSize: true,</span><br><span class=\"line\">  enableSort: true,</span><br><span class=\"line\">  sortOrder: &#39;desc&#39;,</span><br><span class=\"line\">  disableSelection: true,</span><br><span class=\"line\">  infiniteScroll: true,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Grid</span><br><span class=\"line\">  data&#x3D;&#123;gridData&#125;</span><br><span class=\"line\">  options&#x3D;&#123;options&#125;</span><br><span class=\"line\">&#x2F;&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"props-的不兼容性\"><a href=\"#props-的不兼容性\" class=\"headerlink\" title=\"props 的不兼容性\"></a>props 的不兼容性</h3><p>避免组件之间传递不兼容的 <code>props</code>。</p>\n<p>假设你的组件库中有一个 <code>&lt;Input /&gt;</code> 组件，而该组件开始时仅用于处理文本，但过了一段时间后，你将它用于电话号码处理。</p>\n<p>你的实现可能如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPYfunction Input(&#123; value, isPhoneNumberInput, autoCapitalize &#125;) &#123;</span><br><span class=\"line\">  if (autoCapitalize) capitalize(value)</span><br><span class=\"line\"></span><br><span class=\"line\">  return &lt;input value&#x3D;&#123;value&#125; type&#x3D;&#123;isPhoneNumberInput ? &#39;tel&#39; : &#39;text&#39;&#125; &#x2F;&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>问题在于，<code>isPhoneNumberInput</code> 与 <code>autoCapitalize</code> 之间并不存在关联，将一个手机号首字母大写是没有任何意义的。</p>\n<p>在这种情况下，我们可以将其分割成多个小组件，来明确具体的职责，如果有共享逻辑，可以将其放到 <code>hooks</code> 中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPYfunction TextInput(&#123; value, autoCapitalize &#125;) &#123;</span><br><span class=\"line\">  if (autoCapitalize) capitalize(value)</span><br><span class=\"line\">  useSharedInputLogic()</span><br><span class=\"line\"></span><br><span class=\"line\">  return &lt;input value&#x3D;&#123;value&#125; type&#x3D;&quot;text&quot; &#x2F;&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function PhoneNumberInput(&#123; value &#125;) &#123;</span><br><span class=\"line\">  useSharedInputLogic()</span><br><span class=\"line\"></span><br><span class=\"line\">  return &lt;input value&#x3D;&#123;value&#125; type&#x3D;&quot;tel&quot; &#x2F;&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>虽然上面例子有点勉强，可当发现组件的<code>props</code>存在不兼容性时，是时候考虑拆分组件了。</p>\n<h3 id=\"props-复制为-state\"><a href=\"#props-复制为-state\" class=\"headerlink\" title=\"props 复制为 state\"></a>props 复制为 state</h3><p>如何更好地将 <code>props</code> 作为 <code>state</code> 的初始值。</p>\n<p>有如下组件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPYfunction Button(&#123; text &#125;) &#123;</span><br><span class=\"line\">  const [buttonText] &#x3D; useState(text)</span><br><span class=\"line\"></span><br><span class=\"line\">  return &lt;button&gt;&#123;buttonText&#125;&lt;&#x2F;button&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该组件将 <code>text</code> 作为 <code>useState</code> 的初始值，可能会导致意想不到的行为。</p>\n<p>实际上该组件已经关掉了 <code>props</code> 的更新通知，如果 <code>text</code> 在上层被更新，它将仍呈现 接受到 <code>text</code> 的第一次值，这更容易使组件出错。</p>\n<p>一个更实际场景是，我们想基于 <code>props</code> 通过大量计算来得到新的 <code>state</code>。</p>\n<p>在下面的例子中，<code>slowlyFormatText</code> 函数用于格式化 <code>text</code>，注意 需要很长时间才能完成。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPYfunction Button(&#123; text &#125;) &#123;</span><br><span class=\"line\">  const [formattedText] &#x3D; useState(() &#x3D;&gt; slowlyFormatText(text))</span><br><span class=\"line\"></span><br><span class=\"line\">  return &lt;button&gt;&#123;formattedText&#125;&lt;&#x2F;button&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解决此问题 最好的方案是 使用 <code>useMemo</code> 代替 <code>useState</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPYfunction Button(&#123; text &#125;) &#123;</span><br><span class=\"line\">  const formattedText &#x3D; useMemo(() &#x3D;&gt; slowlyFormatText(text), [text])</span><br><span class=\"line\"></span><br><span class=\"line\">  return &lt;button&gt;&#123;formattedText&#125;&lt;&#x2F;button&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在 <code>slowFormatFormat</code> 仅在 <code>text</code> 更改时运行，并且没有阻断 上层组件更新。</p>\n<p>进一步阅读：<a href=\"https://overreacted.io/writing-resilient-components/\">Writing resilient components by Dan Abramov</a>。</p>\n<h3 id=\"返回-JSX-的函数\"><a href=\"#返回-JSX-的函数\" class=\"headerlink\" title=\"返回 JSX 的函数\"></a>返回 JSX 的函数</h3><p>不要从组件内部的函数中返回 <code>JSX</code>。</p>\n<p>这种模式虽然很少出现，但我还是时不时碰到。</p>\n<p>仅举一个例子来说明:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPYfunction Component() &#123;</span><br><span class=\"line\">  const topSection &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;header&gt;</span><br><span class=\"line\">        &lt;h1&gt;Component header&lt;&#x2F;h1&gt;</span><br><span class=\"line\">      &lt;&#x2F;header&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const middleSection &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;main&gt;</span><br><span class=\"line\">        &lt;p&gt;Some text&lt;&#x2F;p&gt;</span><br><span class=\"line\">      &lt;&#x2F;main&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const bottomSection &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;footer&gt;</span><br><span class=\"line\">        &lt;p&gt;Some footer text&lt;&#x2F;p&gt;</span><br><span class=\"line\">      &lt;&#x2F;footer&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &#123;topSection()&#125;</span><br><span class=\"line\">      &#123;middleSection()&#125;</span><br><span class=\"line\">      &#123;bottomSection()&#125;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该例子虽然看起来没什么问题，但其实这会破坏代码的整体性，使维护变得困难。</p>\n<p>要么把函数返回的 <code>JSX</code> 直接内联到组件内，要么将其拆分成一个组件。</p>\n<p>有一点需要注意，如果你创建了一个新组件，不必将其移动到新文件中的。</p>\n<p>如果多个组件紧密耦合，将它们保存在同一个文件中是有意义的。</p>\n<h3 id=\"state-的多个状态\"><a href=\"#state-的多个状态\" class=\"headerlink\" title=\"state 的多个状态\"></a>state 的多个状态</h3><p>避免使用多个布尔值来表示组件状态。</p>\n<p>当编写一个组件并多次迭代后，很容易出现这样一种情况，即内部有多个布尔值来表示 该组件处于哪种状态。</p>\n<p>比如下面的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPYfunction Component() &#123;</span><br><span class=\"line\">  const [isLoading, setIsLoading] &#x3D; useState(false)</span><br><span class=\"line\">  const [isFinished, setIsFinished] &#x3D; useState(false)</span><br><span class=\"line\">  const [hasError, setHasError] &#x3D; useState(false)</span><br><span class=\"line\"></span><br><span class=\"line\">  const fetchSomething &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    setIsLoading(true)</span><br><span class=\"line\"></span><br><span class=\"line\">    fetch(url)</span><br><span class=\"line\">      .then(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        setIsLoading(false)</span><br><span class=\"line\">        setIsFinished(true)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        setHasError(true)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (isLoading) return &lt;Loader &#x2F;&gt;</span><br><span class=\"line\">  if (hasError) return &lt;Error &#x2F;&gt;</span><br><span class=\"line\">  if (isFinished) return &lt;Success &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  return &lt;button onClick&#x3D;&#123;fetchSomething&#125; &#x2F;&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当按钮被点击时，我们将 <code>isLoading</code> 设置为 <code>true</code>，并通过 <code>fetch</code> 执行网络请求。</p>\n<p>如果请求成功，我们将 <code>isLoading</code> 设置为 <code>false</code>，<code>isFinished</code> 设置为 <code>true</code>，如果有错误，将 <code>hasError</code> 设置为 <code>true</code>。</p>\n<p>虽然这在技术上是可行的，但很难推断出组件处于什么状态，而且不容易维护。</p>\n<p>并且有可能最终处于“不可能的状态”，比如我们不小心同时将 <code>isLoading</code> 和 <code>isFinished</code> 设置为 <code>true</code>。</p>\n<p>解决此问题一劳永逸的方案是 使用枚举来管理状态。</p>\n<p>在其他语言中，枚举是一种定义变量的方式，该变量只允许设置为预定义的常量值集合，虽然在<code>JavaScript</code> 中不存在枚举，但我们可以使用字符串作为枚举：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPYfunction Component() &#123;</span><br><span class=\"line\">  const [state, setState] &#x3D; useState(&#39;idle&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">  const fetchSomething &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    setState(&#39;loading&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">    fetch(url)</span><br><span class=\"line\">      .then(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        setState(&#39;finished&#39;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        setState(&#39;error&#39;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (state &#x3D;&#x3D;&#x3D; &#39;loading&#39;) return &lt;Loader &#x2F;&gt;</span><br><span class=\"line\">  if (state &#x3D;&#x3D;&#x3D; &#39;error&#39;) return &lt;Error &#x2F;&gt;</span><br><span class=\"line\">  if (state &#x3D;&#x3D;&#x3D; &#39;finished&#39;) return &lt;Success &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  return &lt;button onClick&#x3D;&#123;fetchSomething&#125; &#x2F;&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过这种方式，完全杜绝了出现 不可能状态的情况，并更利用扩展。</p>\n<p>如果你使用 <code>TypeScript</code> 开发的话，则可以从定义时就实现枚举：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPYconst [state, setState] &#x3D; useState&lt;&#39;idle&#39; | &#39;loading&#39; | &#39;error&#39; | &#39;finished&#39;&gt;(&#39;idle&#39;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useState-过多\"><a href=\"#useState-过多\" class=\"headerlink\" title=\"useState 过多\"></a>useState 过多</h3><p>避免在同一个组件中使用太多的 <code>useState</code>。</p>\n<p>一个包含许多 <code>useState</code> 的组件可能会做多件事情，可以考虑是否要拆分它。</p>\n<p>当然也存在一些复杂的场景，我们需要在组件中管理一些复杂的状态。</p>\n<p>下面是自动输入组件的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPYfunction AutocompleteInput() &#123;</span><br><span class=\"line\">  const [isOpen, setIsOpen] &#x3D; useState(false)</span><br><span class=\"line\">  const [inputValue, setInputValue] &#x3D; useState(&#39;&#39;)</span><br><span class=\"line\">  const [items, setItems] &#x3D; useState([])</span><br><span class=\"line\">  const [selectedItem, setSelectedItem] &#x3D; useState(null)</span><br><span class=\"line\">  const [activeIndex, setActiveIndex] &#x3D; useState(-1)</span><br><span class=\"line\"></span><br><span class=\"line\">  const reset &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    setIsOpen(false)</span><br><span class=\"line\">    setInputValue(&#39;&#39;)</span><br><span class=\"line\">    setItems([])</span><br><span class=\"line\">    setSelectedItem(null)</span><br><span class=\"line\">    setActiveIndex(-1)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const selectItem &#x3D; (item) &#x3D;&gt; &#123;</span><br><span class=\"line\">    setIsOpen(false)</span><br><span class=\"line\">    setInputValue(item.name)</span><br><span class=\"line\">    setSelectedItem(item)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们有一个 <code>reset</code> 函数，可以重置所有状态，还有一个 <code>selectItem</code> 函数，可更新一些状态。</p>\n<p>这些函数都离不开 <code>useState</code> 定义的状态。如果功能继续迭代，那么函数就会越来越多，状态也会随之增加，数据流就会变得模糊不清。</p>\n<p>在这种情况下，使用 <code>useReducer</code> 来代替 过多的 <code>useState</code> 是一个不错的选择。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPYconst initialState &#x3D; &#123;</span><br><span class=\"line\">  isOpen: false,</span><br><span class=\"line\">  inputValue: &quot;&quot;,</span><br><span class=\"line\">  items: [],</span><br><span class=\"line\">  selectedItem: null,</span><br><span class=\"line\">  activeIndex: -1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function reducer(state, action) &#123;</span><br><span class=\"line\">  switch (action.type) &#123;</span><br><span class=\"line\">    case &quot;reset&quot;:</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        ...initialState</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    case &quot;selectItem&quot;:</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        isOpen: false,</span><br><span class=\"line\">        inputValue: action.payload.name,</span><br><span class=\"line\">        selectedItem: action.payload</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      throw Error()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function AutocompleteInput() &#123;</span><br><span class=\"line\">  const [state, dispatch] &#x3D; useReducer(reducer, initialState)</span><br><span class=\"line\"></span><br><span class=\"line\">  const reset &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    dispatch(&#123; type: &#39;reset&#39; &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const selectItem &#x3D; (item) &#x3D;&gt; &#123;</span><br><span class=\"line\">    dispatch(&#123; type: &#39;selectItem&#39;, payload: item &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过使用 <code>reducer</code>，我们封装了管理状态的逻辑，并将复杂的逻辑移出了组件，这使得组件更容易维护。</p>\n<p>进一步阅读：<a href=\"https://kentcdodds.com/blog/the-state-reducer-pattern-with-react-hooks\">state reducer pattern by Kent C. Dodds</a>。</p>\n<h3 id=\"复杂的-useEffect\"><a href=\"#复杂的-useEffect\" class=\"headerlink\" title=\"复杂的 useEffect\"></a>复杂的 useEffect</h3><p>避免在 <code>useEffect</code> 中做太多事情，它们使代码易于出错，并且难以推理。</p>\n<p>下面的例子中 犯了一个很大的错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPYfunction Post(&#123; id, unlisted &#125;) &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    fetch(&#96;&#x2F;posts&#x2F;$&#123;id&#125;&#96;).then(&#x2F;* do something *&#x2F;)</span><br><span class=\"line\"></span><br><span class=\"line\">    setVisibility(unlisted)</span><br><span class=\"line\">  &#125;, [id, unlisted])</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当 <code>unlisted</code> 改变时，即使 <code>id</code> 没有变，也会调用 <code>fetch</code>。</p>\n<p>正确的写法应该是 将多个依赖分离：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPYfunction Post(&#123; id, unlisted &#125;) &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(() &#x3D;&gt; &#123; &#x2F;&#x2F; when id changes fetch the post</span><br><span class=\"line\">    fetch(&#96;&#x2F;posts&#x2F;$&#123;id&#125;&#96;).then(&#x2F;* ... *&#x2F;)</span><br><span class=\"line\">  &#125;, [id])</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(() &#x3D;&gt; &#123; &#x2F;&#x2F; when unlisted changes update visibility</span><br><span class=\"line\">    setVisibility(unlisted)</span><br><span class=\"line\">  &#125;, [unlisted])</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>以上就是我分享的全部。请记住，这些绝不是规则，而是表明某些东西可能是“错误的”。</p>\n<p>如果你也发现了其他的问题模式，欢迎发表评论，或者在 <a href=\"https://twitter.com/awnton\">Twitter</a> 上联系我。</p>\n<p>转载本站文章请注明作者和出处 <a href=\"http://tomotoes.com/\">一个坏掉的番茄</a>，请勿用于任何商业用途。</p>\n","text":" 阅读本文可能花费您 9 分钟教你如何更好地写 React。前言原文链接：7 code smells in your React components作者信息：Anton Gunnarsson翻译许可：正文自从使用 React 后，我见过越来越多可值得优化的点，比如：大量的 pr","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"MongoDB","slug":"MongoDB","date":"2020-12-07T09:47:18.000Z","updated":"2021-03-08T09:55:43.117Z","comments":true,"path":"api/articles/MongoDB.json","excerpt":"","keywords":null,"cover":"https://howlcn1997.github.io/2019/03/16/MongoDB/%E5%BB%BA%E7%AB%8B%E9%93%BE%E6%8E%A5.png","content":"<h1 id=\"MongoDB\"><a href=\"#MongoDB\" class=\"headerlink\" title=\"MongoDB\"></a>MongoDB</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;缓存---&gt;文件---&gt;关系型数据库</span><br><span class=\"line\">&#x2F;&#x2F;1.数据保存到内存：</span><br><span class=\"line\">优点：</span><br><span class=\"line\">1）读写非常快</span><br><span class=\"line\">缺点：</span><br><span class=\"line\">1）程序关闭导致数据丢失</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;2.数据保存到文件：</span><br><span class=\"line\">优点：</span><br><span class=\"line\">1）数据可以永久保存</span><br><span class=\"line\">缺点：</span><br><span class=\"line\">1）频繁地IO操作，效率不高！</span><br><span class=\"line\">2）数据管理不方便。例如查询某个数据需要全部读取出来，再匹配。</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;3.数据保存到数据库软件：</span><br><span class=\"line\">优点：</span><br><span class=\"line\">1）数据永久保存下来</span><br><span class=\"line\">2）数据管理非常方便。（例如查询非常快速和方便）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关系型数据库\"><a href=\"#关系型数据库\" class=\"headerlink\" title=\"关系型数据库\"></a>关系型数据库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">关系型数据库（Mysql和Oracle） ： 表和表、表和字段、数据和数据存在着关系</span><br><span class=\"line\"></span><br><span class=\"line\">优点:</span><br><span class=\"line\">1.数据之间有关系，进行数据的增删改查的时候是非常方便的</span><br><span class=\"line\">2.关系型数据库是有事务操作的，保证数据的完整性和一致性。</span><br><span class=\"line\"></span><br><span class=\"line\">缺点：</span><br><span class=\"line\">1.因为数据和数据是有关系的，底层是运行了大量的算法。大量算法会降低系统的效率，会降低性能</span><br><span class=\"line\">2.数据存在硬盘中，面对海量数据的增删改查的时候会显的无能为力，面对海量数据对数据进行维护变得非常的无力</span><br><span class=\"line\">3.限制字段：比如现在数据库中已经有10万条数据了（在今天10万条都不算大数据），如果想从下一条数据开始增加一些字段，此时之前的10万条数据都需要一同被更改。SQL中，表的字段是不能自由更改的，不能某一个条目有一些字段，另外的条目的没有。</span><br><span class=\"line\"></span><br><span class=\"line\">适合处理一般量级的数据（银行转账和钱）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Oracle，甲骨文公司的产品。 当前最流行应用最广泛的数据库软件。适合中大型，中大应用。</span><br><span class=\"line\">SQL Server: 是微软公司的产品。window平台应用非常广泛。和c#，net平台兼容非常好。</span><br><span class=\"line\">DB2： IBM公司的产品。</span><br><span class=\"line\">MySQL: 开源组织的产品。甲骨文公司的产品。免费</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"非关系型数据库\"><a href=\"#非关系型数据库\" class=\"headerlink\" title=\"非关系型数据库\"></a>非关系型数据库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">非关系数据库的（redis和MangDB）。</span><br><span class=\"line\">为了处理海量数据，非关系数据库设计之初就是为了替代关系型数据库的</span><br><span class=\"line\"></span><br><span class=\"line\">优点：</span><br><span class=\"line\">1.数据维护在缓存中，海量数据的增删改查和维护和处理非常轻松</span><br><span class=\"line\">2.非关系型数据库简单易部署，基本都是开源软件</span><br><span class=\"line\">3.非关系型数据库存储格式是key,value形式、文档形式、图片形式等等，所以可以存储基础类型以及对象或者是集合等各种格式，非常灵活</span><br><span class=\"line\"></span><br><span class=\"line\">缺点：</span><br><span class=\"line\">1.数据和数据没有关系，他们之间就是单独存在的</span><br><span class=\"line\">2.数据维护在内存中，当有海量数据的时候会非常占内存，而内存的价格会比较高</span><br><span class=\"line\"></span><br><span class=\"line\">适合处理海量数据，保证效率，不一定安全（统计数据，例如微博数据）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MongoDB</span><br><span class=\"line\">Redis</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"非关系型数据库的分类\"><a href=\"#非关系型数据库的分类\" class=\"headerlink\" title=\"非关系型数据库的分类\"></a>非关系型数据库的分类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">键值类数据库 ： Redis</span><br><span class=\"line\"></span><br><span class=\"line\">列存储数据库  :  HBase</span><br><span class=\"line\"></span><br><span class=\"line\">文档类数据库  : MongoDB</span><br><span class=\"line\"></span><br><span class=\"line\">图形数据库  : Graph</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mongoDB的介绍\"><a href=\"#mongoDB的介绍\" class=\"headerlink\" title=\"mongoDB的介绍\"></a>mongoDB的介绍</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MongoDB是一个高性能、开源、无模式的文档型数据库，设计用于提供高性能、水平可扩性、高可用性和高级可查询性，为Web应用提供可扩展的高性能数据存储解决方案。</span><br><span class=\"line\"></span><br><span class=\"line\">MongoDB的名称取自单词”humogous”中间的几个字符，是很大、巨大的意思。该数据库由10gen公司开发并提供技术支持，它属于NoSQL数据库家族中的一员，在许多场景下可以用来替代传统关系型数据库或key&#x2F;value存储方式。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MongoDB的设计目标是高性能、可扩展、易部署、易使用，存储数据非常方便。其主要功能特性如下： </span><br><span class=\"line\">(1) 面向集合存储，容易存储对象类型的数据。在MongoDB中数据被分组存储在集合中，集合类似RDBMS中的表，一个集合可以存储无限多的文档。 </span><br><span class=\"line\">(2) 模式自由，采用无模式结构存储。在MongoDB里的集合中，存储的是无模式的文档，采用无模式存储数据是集合(Collection)区别于RDBMS中的表(Table)的一个重要特征。 </span><br><span class=\"line\">(3) 支持完全索引，可以在任意属性上建立索引，包含内部对象。MongoDB的索引和RDBMS的索引基本一样，可以在指定属性、内部对象上创建索引以提高查询的速度。除此之外，MongoDB还可以提供创建基于地理空间的索引的能力。 </span><br><span class=\"line\">(4) 支持查询。MongoDB支持丰富的查询操作，MongoDB几乎支持SQL中的大部分查询。 </span><br><span class=\"line\">(5) 强大的聚合工具。MongoDB除了提供丰富的查询功能外，还提供强大的聚合工具，如count、group等，支持使用MapReduce完成复杂的聚合任务。 </span><br><span class=\"line\">(6) 支持复制和数据恢复。MongoDB支持主从复制机制，可以实现数据备份、故障恢复、读扩展等功能。而基于副本集的复制机制提供了自动故障恢复的功能，确保了集群数据不会丢失。 </span><br><span class=\"line\">(7) 使用高效的二进制数据存储，包括大型对象(如视频)。使用二进制格式存储，可以保存任何类型的数据对象。 </span><br><span class=\"line\">(8) 自动处理分片，以支持云计算层次的扩展。MongoDB支持集群自动切分数据，对数据进行分片可以使集群存储更多的数据，实现更大的负载，也能保证存储的负载均衡。</span><br><span class=\"line\">      https:&#x2F;&#x2F;cloud.tencent.com&#x2F;developer&#x2F;article&#x2F;1138683</span><br><span class=\"line\">(9) 支持Perl、PHP、Java、C# 、JavaScript、Ruby、C和C++语言的驱动程序，Mon提供了当前所有主流开发语言的数据库驱动包，开发人员使用任何一种主流开发语言都可以轻松编程，实现访问MongoDB数据库。 </span><br><span class=\"line\">(10) 文件存储格式为BSON(JSON的一种拓展)。BSON是二进制格式JSON的简称，BSON支持文档和数组的嵌套。 </span><br><span class=\"line\">(11) 可以通过网络远程访问MongoDB数据库。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>1、安装mongodb数据库 下载链接</p>\n<p> 注意 安装时不要勾选安装图形化界面。</p>\n<p>2、安装NoSQLBooster for MongoDB</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>1、将mongodb安装目录下的bin路径，添加至系统环境变量path中</p>\n<p>2、在c盘根目录下新建data文件夹，在data文件夹中新建db文件夹</p>\n<h2 id=\"检测\"><a href=\"#检测\" class=\"headerlink\" title=\"检测\"></a>检测</h2><p>在cmd下键入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod --version</span><br></pre></td></tr></table></figure>\n\n<p>若正确显示版本号，则安装配置成功</p>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>1.启动MongoDB数据库 会默认使用C:/data/db作为数据存储目录，所以在使用mongod命令之前需要先在c盘中新建一个data目录，在data目录下新建db目录，才能启动成功</p>\n<p>在cmd下键入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod &#x2F;&#x2F;启动数据库</span><br></pre></td></tr></table></figure>\n\n<p>在cmd下键入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod --datapath&#x3D;数据存储目录    &#x2F;&#x2F;修改mongoDB默认数据存储目录</span><br><span class=\"line\">mongod –dbpath 数据存储目录  &#x2F;&#x2F;启动</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p>在cmd下键入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongo   &#x2F;&#x2F;链接数据库</span><br><span class=\"line\">exit    &#x2F;&#x2F;断开链接</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关闭\"><a href=\"#关闭\" class=\"headerlink\" title=\"关闭\"></a>关闭</h2><p>在cmd下按下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctrl + c</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mongo数据库操作\"><a href=\"#mongo数据库操作\" class=\"headerlink\" title=\"mongo数据库操作\"></a>mongo数据库操作</h2><h3 id=\"NoSQLBooster中mongode使用\"><a href=\"#NoSQLBooster中mongode使用\" class=\"headerlink\" title=\"NoSQLBooster中mongode使用\"></a>NoSQLBooster中mongode使用</h3><p>才使用mongo之前先给出常用命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show dbs        &#x2F;&#x2F;显示所有的数据库</span><br><span class=\"line\">use library       &#x2F;&#x2F;使用某个数据库</span><br><span class=\"line\">db                 &#x2F;&#x2F;显示当前使用的数据库</span><br><span class=\"line\">&#x2F;&#x2F;向library中的books集合中插入一条数据 (虽然一开始没有library仓库和books集合，但是不妨碍我们使用)</span><br><span class=\"line\">db.books.insertOne(&#123;&quot;name&quot;:&quot;tom&quot;&#125;)    </span><br><span class=\"line\">show  collections    &#x2F;&#x2F;显示当前library仓库下的所有集合</span><br><span class=\"line\">db.books.find()   &#x2F;&#x2F;显示igeek仓库下的books集合中的所有数据</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;再插入一条数据</span><br><span class=\"line\">db.books.insertOne(&#123;&quot;name&quot;:&quot;kitty&quot;,&quot;age&quot;:18&#125;)</span><br><span class=\"line\">db.books.find()  </span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;删除数据库</span><br><span class=\"line\">db.dropDatabase()</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;在当前数据库下创建集合</span><br><span class=\"line\">db.createCollection(&quot;igeek&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;删除当前仓库下的igeek集合</span><br><span class=\"line\">db.igeek.drop()</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;插入文档</span><br><span class=\"line\">db.igeek.insert(&#123;name:&quot;hello&quot;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;删除指定的文档数据</span><br><span class=\"line\">db.igeek.remove(&#123;&#39;name&#39;:&#39;hello&#39;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;更新文档数据</span><br><span class=\"line\">db.igeek.update(</span><br><span class=\"line\">    &#123;name:&quot;hello&quot;&#125;,</span><br><span class=\"line\">    &#123;$set:&#123;name:&quot;xxx&quot;&#125;&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;upsert:true 如果要更新的文档不存在会插入一条新的记录</span><br><span class=\"line\">        upsert:true,</span><br><span class=\"line\">        multi:true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;根据id更新数据</span><br><span class=\"line\">&#x2F;&#x2F;save方法有更新和插入两种功能，到底是插入还是更新文档取决于save的参数。</span><br><span class=\"line\">db.igeek.save(&#123;</span><br><span class=\"line\">    &quot;_id&quot; : ObjectId(&quot;5c09f5deaf853bfb8a003425&quot;),</span><br><span class=\"line\">    &quot;name&quot; : &quot;kkk&quot;,</span><br><span class=\"line\">    &quot;tags&quot; : [</span><br><span class=\"line\">            &quot;mongodb&quot;,</span><br><span class=\"line\">            &quot;NoSQL&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;likes&quot; : 110</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p> <strong>新建链接</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打开NoSQLBooster for MongoDB --&gt; connect --&gt; create --&gt; save &amp; connect</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://howlcn1997.github.io/2019/03/16/MongoDB/%E5%BB%BA%E7%AB%8B%E9%93%BE%E6%8E%A5.png\" alt=\"建立链接\"></p>\n<p><strong>创建一个数据库并写入一条文件</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use library  &#x2F;&#x2F;指定使用library数据库  此时db关键字就代表library了</span><br><span class=\"line\">db.books.insertOne(&#123;&quot;name&quot;:&quot;红楼梦&quot;&#125;)  &#x2F;&#x2F;向library数据库中的books集合新增一条数据</span><br></pre></td></tr></table></figure>\n\n<p><strong>通过NoSQLBooster for MongoDB将文件内容写入数据库</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;1.在桌面创建这个文件，JSON和JSON之间没有逗号：</span><br><span class=\"line\">&#123;&quot;uname&quot;:&quot;李灵黛&quot;,&quot;age&quot;:12,&quot;sex&quot;:&quot;男&quot;,&quot;provice&quot;:&quot;上海&quot;&#125;</span><br><span class=\"line\">&#123;&quot;uname&quot;:&quot;柳辰飞&quot;,&quot;age&quot;:13,&quot;sex&quot;:&quot;女&quot;,&quot;provice&quot;:&quot;北京&quot;&#125;</span><br><span class=\"line\">&#123;&quot;uname&quot;:&quot;江城子&quot;,&quot;age&quot;:17,&quot;sex&quot;:&quot;男&quot;,&quot;provice&quot;:&quot;广东&quot;&#125;</span><br><span class=\"line\">&#123;&quot;uname&quot;:&quot;萧合凰&quot;,&quot;age&quot;:37,&quot;sex&quot;:&quot;女&quot;,&quot;provice&quot;:&quot;河北&quot;&#125;</span><br><span class=\"line\">&#123;&quot;uname&quot;:&quot;西粼宿&quot;,&quot;age&quot;:16,&quot;sex&quot;:&quot;男&quot;,&quot;provice&quot;:&quot;广东&quot;&#125;</span><br><span class=\"line\">&#123;&quot;uname&quot;:&quot;千湄&quot;,&quot;age&quot;:13,&quot;sex&quot;:&quot;女&quot;,&quot;provice&quot;:&quot;广东&quot;&#125;</span><br><span class=\"line\">&#123;&quot;uname&quot;:&quot;林墨瞳&quot;,&quot;age&quot;:13,&quot;sex&quot;:&quot;女&quot;,&quot;provice&quot;:&quot;吉林&quot;&#125;</span><br><span class=\"line\">&#123;&quot;uname&quot;:&quot;柳婵诗&quot;,&quot;age&quot;:14,&quot;sex&quot;:&quot;女&quot;,&quot;provice&quot;:&quot;河北&quot;&#125;</span><br><span class=\"line\">&#123;&quot;uname&quot;:&quot;李念儿&quot;,&quot;age&quot;:19,&quot;sex&quot;:&quot;女&quot;,&quot;provice&quot;:&quot;广东&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;2.运行命令导入数据</span><br><span class=\"line\">$ mongoimport -d 仓库名 -c 集合名 C:\\Users\\Danny\\Desktop\\1.txt</span><br><span class=\"line\"></span><br><span class=\"line\">-d参数表示需要往哪个数据库中导入数据</span><br><span class=\"line\">-c 参数表示需要往哪个集合(表)中导入数据</span><br></pre></td></tr></table></figure>\n\n<p>在NoSQLBooster for MongoDB中输入命令可以对数据库进行操作，此处不加赘述，仅介绍通过node如何对数据库进行增删改查操作</p>\n<h3 id=\"node中mongo的使用\"><a href=\"#node中mongo的使用\" class=\"headerlink\" title=\"node中mongo的使用\"></a>node中mongo的使用</h3><p> node中对mongo数据库的操作需要用到 mongoose包</p>\n<p> mongoose关于Model给出的关于操作数据的常用API</p>\n<p>首先要创建Model对象，如obb,具体创建过程，下文有述</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;增 将obb数据对象添加到集合中</span><br><span class=\"line\">obb.save().then(function(data)&#123;</span><br><span class=\"line\">\t&#x2F;&#x2F;回调刚刚保存的数据对象</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;当一个页面发出post保存表单数据到数据库中时的操作</span><br><span class=\"line\">router.post(&#39;&#x2F;add&#39;,(req,res)&#x3D;&gt;&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;添加id</span><br><span class=\"line\">    req.body._id &#x3D; mongoose.Types.ObjectId();</span><br><span class=\"line\">    &#x2F;&#x2F;声明一个Student Model</span><br><span class=\"line\">    let stu &#x3D; new Student();</span><br><span class=\"line\">    &#x2F;&#x2F;将表单数据浅拷贝到stu Model对象中</span><br><span class=\"line\">    Object.assign(stu,req.body);</span><br><span class=\"line\">    &#x2F;&#x2F;保存</span><br><span class=\"line\">    stu.save().then(function()&#123;</span><br><span class=\"line\">        res.redirect(&#39;&#x2F;student&#x2F;studentList&#39;);</span><br><span class=\"line\">    &#125;,function(err)&#123;</span><br><span class=\"line\">        res.render(&#39;studentAdd.html&#39;,&#123;err_msg:err.message&#125;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;删</span><br><span class=\"line\">Book.remove(&#123;name:&quot;红楼梦&quot;&#125;).then(function(msg)&#123;</span><br><span class=\"line\">\t&#x2F;&#x2F;回调刚刚删除的数据对象</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;改</span><br><span class=\"line\">&#x2F;&#x2F;new 默认为false 返回修改之前的数据     true返回修改之后的数据</span><br><span class=\"line\">Book.findByIdAndUpdata(_id,&#123;要加入数据库的对象&#125;,&#123;new:true&#125;).then(function(data)&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;查</span><br><span class=\"line\">Book.find();&#x2F;&#x2F;查询所有数据</span><br><span class=\"line\">&#x2F;&#x2F;Book.find().then(function(data)&#123;&#125;);&#x2F;&#x2F;中返回的data是封装过的对象，我们要的数据其实是data._doc</span><br><span class=\"line\">Book.find(&#123; name: &#39;红楼梦&#39;, price: &#123; $gte: 20 &#125;&#125;); &#x2F;&#x2F;加入查询条件  与</span><br><span class=\"line\">Book.find(&#123;$or:[&#123;name:&#39;三国演义&#39;&#125;,&#123;price:&#123;$gte:20&#125;&#125;]); &#x2F;&#x2F;加入查询条件  或</span><br><span class=\"line\">Book.findOne(条件);          </span><br><span class=\"line\">Book.findById();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1、新建node项目（文件夹）\"><a href=\"#1、新建node项目（文件夹）\" class=\"headerlink\" title=\"1、新建node项目（文件夹）\"></a>1、新建node项目（文件夹）</h4><h4 id=\"2、在项目中安装第三方包-mongoose\"><a href=\"#2、在项目中安装第三方包-mongoose\" class=\"headerlink\" title=\"2、在项目中安装第三方包 mongoose\"></a>2、在项目中安装第三方包 mongoose</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">npm install mongoose</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-新建js文件（如server-js）\"><a href=\"#3-新建js文件（如server-js）\" class=\"headerlink\" title=\"3.新建js文件（如server.js）\"></a>3.新建js文件（如server.js）</h4><h5 id=\"1）引入mongoose\"><a href=\"#1）引入mongoose\" class=\"headerlink\" title=\"1）引入mongoose\"></a>1）引入mongoose</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const mongoose &#x3D; require(&#39;mongoose&#39;)；</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2）建立连接\"><a href=\"#2）建立连接\" class=\"headerlink\" title=\"2）建立连接\"></a>2）建立连接</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;mongoose.connect(&#39;mongodb:&#x2F;&#x2F;域名&#x2F;数据库名&#39;, &#123;useNewUrlParser: true&#125;);</span><br><span class=\"line\">mongoose.connect(&#39;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;library&#39;, &#123;useNewUrlParser: true&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3）连接对象的回调\"><a href=\"#3）连接对象的回调\" class=\"headerlink\" title=\"3）连接对象的回调\"></a>3）连接对象的回调</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var db &#x3D; mongoose.connection;&#x2F;&#x2F;拿到链接对象</span><br><span class=\"line\">db.on(&#39;error&#39;, console.error.bind(console, &#39;connection error:&#39;));&#x2F;&#x2F;</span><br><span class=\"line\">db.once(&#39;open&#39;, function() &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; we&#39;re connected!</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-创建一个schema\"><a href=\"#4-创建一个schema\" class=\"headerlink\" title=\"4)创建一个schema\"></a>4)创建一个schema</h5><p>这个schema是与数据库中表的schema是一一对应的</p>\n<p><strong>这种机制是ORM object relational model 对象关系映射模型</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bookSchema &#x3D; new mongoose.Schema(&#123;</span><br><span class=\"line\">  name: String</span><br><span class=\"line\">  &#x2F;&#x2F;是否全部借出</span><br><span class=\"line\">   isLendAll: Boolean</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>schema数据类型除了String类型 还有以下几种</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">• String</span><br><span class=\"line\">• Number</span><br><span class=\"line\">• Date</span><br><span class=\"line\">• Boolean</span><br><span class=\"line\">• Buffer   &#x2F;&#x2F;流，音频 视频等文件可以由此保存</span><br><span class=\"line\">• ObjectId  &#x2F;&#x2F; 使用  mongoose.Schema.Types.ObjectId</span><br><span class=\"line\">• Mixed   &#x2F;&#x2F;混合数据格式  使用  mongoose.Schema.Types.Mixed</span><br><span class=\"line\">• Array</span><br></pre></td></tr></table></figure>\n\n<p>schema数据字段中还可以更细化的限制其取值，例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bookSchema &#x3D; new mongoose.Schema(&#123;</span><br><span class=\"line\">    name: &#123;</span><br><span class=\"line\">        type: String,</span><br><span class=\"line\">        minlength: 1,&#x2F;&#x2F;规定字符串最小长度</span><br><span class=\"line\">        maxlenght:10 &#x2F;&#x2F;规定字符串最大长度</span><br><span class=\"line\">        match:   &#x2F;&#x2F;限定字符串格式，正则表达式</span><br><span class=\"line\">    &#125;String</span><br><span class=\"line\">    price: &#123;</span><br><span class=\"line\">    type: Number,</span><br><span class=\"line\">    min: 0, &#x2F;&#x2F;限定最小值</span><br><span class=\"line\">    max: 100 &#x2F;&#x2F;限定最大值</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    &#x2F;&#x2F;是否全部借出</span><br><span class=\"line\">    isLendAll:&#123;</span><br><span class=\"line\">    type: Boolean,</span><br><span class=\"line\">    enum: [0,1],  &#x2F;&#x2F;枚举 用数据限定isLendAll可以取到的值</span><br><span class=\"line\">    default: 0   &#x2F;&#x2F;默认值</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-新建一个model对象\"><a href=\"#5-新建一个model对象\" class=\"headerlink\" title=\"5)新建一个model对象\"></a>5)新建一个model对象</h5><p>此时 Book对象 与 数据库中books集合形成一一对应关系，对Book的操作，便是对集合books的操作，接下来的操作都是建立在此基础上的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Book &#x3D; mongoose.model(&#39;book&#39;, bookSchema); &#x2F;&#x2F;注意此处创建对象时，model中入参 &#39;book&#39; 时，那么数据库中对应的集合应该以 books 命名，不然无法对响应表进行操作</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"查询一条数据\"><a href=\"#查询一条数据\" class=\"headerlink\" title=\"查询一条数据\"></a>查询一条数据</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.find(&#123;name: &#39;红楼梦&#39;&#125;,function(err,arr)&#123;  </span><br><span class=\"line\">    if(err)&#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        console.log(arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#x2F;&#x2F;打印结果 [ &#123; _id: 5cf3c3f19cad171ee8e202ca, name: &#39;红楼梦&#39; &#125; ]</span><br><span class=\"line\">&#x2F;&#x2F;是一个数组  就算只有一条数据 最后得到的数据也是数组</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"新增数据\"><a href=\"#新增数据\" class=\"headerlink\" title=\"新增数据\"></a>新增数据</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>","text":"MongoDB1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>&#x2F;&#x2F;缓存---&gt;文件---&gt;关系型数","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"vue中路由跳转view却不更新的问题与解决办法","slug":"vue中路由跳转view却不更新的问题与解决办法","date":"2020-11-23T09:45:38.000Z","updated":"2021-03-08T09:55:45.953Z","comments":true,"path":"api/articles/vue中路由跳转view却不更新的问题与解决办法.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"vue中路由跳转view却不更新的问题与解决办法\"><a href=\"#vue中路由跳转view却不更新的问题与解决办法\" class=\"headerlink\" title=\"vue中路由跳转view却不更新的问题与解决办法\"></a>vue中路由跳转view却不更新的问题与解决办法</h1><p>一般情况下路由从<code>/myrouter</code>跳转至<code>/yourrouter</code>时，view会发生更新。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">若遇到&#x2F;products&#x2F;:id这样只改变id号的场景。就不会发生更新</span><br></pre></td></tr></table></figure>\n\n<p>情况如下：</p>\n<p><code>router.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    path: &quot;&#x2F;products&#x2F;:id&quot;,</span><br><span class=\"line\">    name: &quot;product&quot;,</span><br><span class=\"line\">    components: Product</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在路由<code>/products/:id</code>对应一个组件<code>Product.vue</code>,组件中有</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;test1&lt;&#x2F;h1&gt;</span><br><span class=\"line\">        &lt;p&gt;msg: &#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    mounted()&#123;</span><br><span class=\"line\">        this.init(this.$router.history.current.params.id);</span><br><span class=\"line\">    &#125;，</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        init(id)&#123;</span><br><span class=\"line\">            this.msg &#x3D; this.$router.history.current.params.id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>为什么上述情况会导致view不更新呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">答：由于router-view是复用的，单纯的改变id号并不会刷新router-view。追根揭底就是因为data没有变化，只要路由跳转时触发 init() 函数来改变data就可以了。</span><br></pre></td></tr></table></figure>\n\n<p>解决办法：</p>\n<ol>\n<li><p>用 :key 来阻止“复用”</p>\n<p>在父组件中使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-view :key&#x3D;&quot;key&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">\tkey() &#123;</span><br><span class=\"line\">\t\treturn this.$route.name !&#x3D;&#x3D; undefined? this.$route.name +new Date(): this.$route +new Date()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种办法实质上是让每次路由跳转时重新构建该组件，我们在它的生命周期中写一个打印语句就能看出来。</p>\n</li>\n<li><p>通过 watch 监听路由</p>\n<p>在子组件中使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123; &#x2F;&#x2F;通过watch来监听路由变化</span><br><span class=\"line\">    &#39;$route&#39;: function () &#123;</span><br><span class=\"line\">\t\tthis.init(this.$router.history.current.params.id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>通过 <code>vue-router</code>的钩子函数 <code>beforeRouteEnter</code> <code>beforeRouteUpdate</code> <code>beforeRouteLeave</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeRouteEnter (to, from, next) &#123;</span><br><span class=\"line\">   &#x2F;&#x2F; 在渲染该组件的对应路由被 confirm 前调用</span><br><span class=\"line\">   &#x2F;&#x2F; 不！能！获取组件实例 &#96;this&#96;</span><br><span class=\"line\">   &#x2F;&#x2F; 因为当钩子执行前，组件实例还没被创建</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">beforeRouteUpdate (to, from, next) &#123;</span><br><span class=\"line\">   &#x2F;&#x2F; 在当前路由改变，但是该组件被复用时调用</span><br><span class=\"line\">   &#x2F;&#x2F; 举例来说，对于一个带有动态参数的路径 &#x2F;foo&#x2F;:id，在 &#x2F;foo&#x2F;1 和 &#x2F;foo&#x2F;2 之间跳转的时候，</span><br><span class=\"line\">   &#x2F;&#x2F; 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span><br><span class=\"line\">   &#x2F;&#x2F; 可以访问组件实例 &#96;this&#96;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">beforeRouteLeave (to, from, next) &#123;</span><br><span class=\"line\">   &#x2F;&#x2F; 导航离开该组件的对应路由时调用</span><br><span class=\"line\">   &#x2F;&#x2F; 可以访问组件实例 &#96;this&#96;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","text":"vue中路由跳转view却不更新的问题与解决办法一般情况下路由从/myrouter跳转至/yourrouter时，view会发生更新。1<br>若遇到&#x2F;products&#x2F;:id这样只改变id号的场景。就不会发生更新<br>情况如下：router.js1<br>","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"正则表达式","slug":"正则表达式","date":"2020-11-03T07:23:04.000Z","updated":"2021-03-08T09:44:42.145Z","comments":true,"path":"api/articles/正则表达式.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h1><p>正则就是对字符串进行查找、匹配、替换等操作的一串“规则字符串”</p>\n<p>使用方法：在一对斜杠之间添加正则表达式 如：**/** 正则表达式 <strong>/</strong></p>\n<h2 id=\"正则表达式的组成\"><a href=\"#正则表达式的组成\" class=\"headerlink\" title=\"正则表达式的组成\"></a>正则表达式的组成</h2><ul>\n<li>普通字符</li>\n<li>特殊字符（元字符）：正则表达式中具有特殊意义的字符</li>\n</ul>\n<h2 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h2><table>\n<thead>\n<tr>\n<th><strong>\\d</strong></th>\n<th><strong>表示数字</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>\\D</strong></td>\n<td><strong>非数字</strong></td>\n</tr>\n<tr>\n<td><strong>\\s</strong></td>\n<td><strong>空格符</strong></td>\n</tr>\n<tr>\n<td><strong>\\S</strong></td>\n<td><strong>非空格符</strong></td>\n</tr>\n<tr>\n<td><strong>\\w</strong></td>\n<td><strong>字母或数字或下划线</strong></td>\n</tr>\n<tr>\n<td><strong>\\W</strong></td>\n<td><strong>非字母、数字、下划线</strong></td>\n</tr>\n<tr>\n<td><strong>.</strong></td>\n<td><strong>任意字符（不包含换行符）</strong></td>\n</tr>\n<tr>\n<td><strong>\\b</strong></td>\n<td><strong>单词边界</strong></td>\n</tr>\n</tbody></table>\n<p>实例1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg &#x3D; &#x2F;\\d&#x2F;; &#x2F;&#x2F;新建一个正则对象</span><br><span class=\"line\"> var str &#x3D; &#39;1&#39;;</span><br><span class=\"line\">console.log(reg.test(str)); &#x2F;&#x2F;true  str中含有数字</span><br><span class=\"line\">&#x2F;&#x2F;test()是正则对象中的一个方法，它会判断str是否满足正则表达式，返回boolean</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"限定符\"><a href=\"#限定符\" class=\"headerlink\" title=\"限定符\"></a>限定符</h2><p>限定之前表达式出现的次数</p>\n<table>\n<thead>\n<tr>\n<th>*****</th>\n<th><strong>重复0次或多次</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>+</strong></td>\n<td><strong>重复1次或多次</strong></td>\n</tr>\n<tr>\n<td><strong>？</strong></td>\n<td><strong>重复0次或1次</strong></td>\n</tr>\n<tr>\n<td><strong>{n}</strong></td>\n<td><strong>重复n次 (连续)</strong></td>\n</tr>\n<tr>\n<td><strong>{n,}</strong></td>\n<td><strong>重复至少n次 (连续)</strong></td>\n</tr>\n<tr>\n<td><strong>{n,m}</strong></td>\n<td><strong>重复n到m次 (连续)</strong></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg &#x3D; &#x2F;\\d*&#x2F;;</span><br><span class=\"line\">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;true</span><br><span class=\"line\">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg &#x3D; &#x2F;\\d+&#x2F;;</span><br><span class=\"line\">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;false</span><br><span class=\"line\">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg &#x3D; &#x2F;\\d?&#x2F;;</span><br><span class=\"line\">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;true</span><br><span class=\"line\">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;true</span><br><span class=\"line\">console.log(reg.test(&#39;w12&#39;));&#x2F;&#x2F;true</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;这里12出现了两次，不满足“重复0次或1次”的条件为什么显示为true呢？</span><br><span class=\"line\">&#x2F;&#x2F;当执行test()时，只要字符串中有部分满足条件则返回true）</span><br><span class=\"line\">&#x2F;&#x2F;解决办法var reg &#x3D; &#x2F;^\\d?$&#x2F;;  加上开始结束符（后面会介绍）</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg &#x3D; &#x2F;\\d&#123;2&#125;&#x2F;;&#x2F;&#x2F;&#123;n&#125;</span><br><span class=\"line\">console.log(reg.test(&#39;2&#39;));&#x2F;&#x2F;false</span><br><span class=\"line\">console.log(reg.test(&#39;23&#39;));&#x2F;&#x2F;true</span><br><span class=\"line\">console.log(reg.test(&#39;2w3&#39;));&#x2F;&#x2F;false  不连续时匹配失败</span><br><span class=\"line\">console.log(reg.test(&#39;234&#39;));&#x2F;&#x2F;true  (理应为false)原因同上</span><br><span class=\"line\">console.log(reg.test(&#39;ab234&#39;));&#x2F;&#x2F;true  (理应为false)原因同上  解决办法同上</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg &#x3D; &#x2F;\\d&#123;2,&#125;&#x2F;;&#x2F;&#x2F;&#123;n,&#125;  &#x2F;&#x2F;同样存在以上问题</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg &#x3D; &#x2F;\\d&#123;2,6&#125;&#x2F;;&#x2F;&#x2F;&#123;n,m&#125;  &#x2F;&#x2F;同样存在以上问题</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"范围符\"><a href=\"#范围符\" class=\"headerlink\" title=\"范围符[ ]\"></a>范围符[ ]</h2><p>1、[a-z]、[A-Z]、[0-9],也可以综合写成[a-zA-Z0-9]；当然这范围是自己定义的，比如[a-b]，范围是a到b。</p>\n<p>2、[\\u4e00-\\u9fa5] 匹配汉字的范围 其中\\u4e00，\\u9fa5是中日韩汉字Unicode表中对应的编码 4e00对应“一” 9fa5对应“龥”</p>\n<p><a href=\"http://www.chi2ko.com/tool/CJK.htm\">中日韩汉字Unicode表</a></p>\n<p>3、[ab5&amp;@],仅匹配 a 或 b 或 5 或 &amp; 或 @</p>\n<p>4、**[^ab5&amp;@]** 匹配除 a 或 b 或 5 或 &amp; 或 @之外的内容 （注意此处^是在[ ]内的，<strong>区别于开始符^</strong>,两者所处位置不同）</p>\n<p>5、3 | a 匹配3或者a字符</p>\n<h2 id=\"开始结束符号\"><a href=\"#开始结束符号\" class=\"headerlink\" title=\"开始结束符号\"></a>开始结束符号</h2><table>\n<thead>\n<tr>\n<th><strong>^</strong></th>\n<th><strong>开始符（强制规定匹配开始的地方）</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>$</strong></td>\n<td><strong>结束符（强制规定匹配结束的地方）</strong></td>\n</tr>\n</tbody></table>\n<p>实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d 字符串要以数字开始，数字只能出现一次</span><br><span class=\"line\">\\d$  字符串要以数字结束，数字只能出现一次</span><br><span class=\"line\">^\\d$  字符串要以数字开始和结束，数字只能出现一次</span><br><span class=\"line\"></span><br><span class=\"line\">\\d+$  字符串要以数字开始，以数字结束，数字只能出现一次</span><br><span class=\"line\"></span><br><span class=\"line\">^\\d?$  字符串要以数字开头和结束，数字出现0次或1次</span><br></pre></td></tr></table></figure>\n\n<p>我们来解释 <strong>var reg = /\\d?/;</strong> 例子中出现的问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg &#x3D; &#x2F;\\d?&#x2F;;</span><br><span class=\"line\">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;true</span><br><span class=\"line\">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;开始检测，当检测到 1 时，因为满足了数字出现0次，匹配成功，返回true，此时结束位置在1和2之间</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;加入开始结束符</span><br><span class=\"line\">var reg &#x3D; &#x2F;^\\d?$&#x2F;;</span><br><span class=\"line\">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;true</span><br><span class=\"line\">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;当加入开始结束字符后，开始匹配位置强制从1开始 2结束</span><br><span class=\"line\">&#x2F;&#x2F;则12是由两个数字的  不符合“重复0次或1次”的条件，则为false</span><br></pre></td></tr></table></figure>\n\n<p>我们来解释 <strong>var reg = /\\d{2}/;</strong> 例子中出现的问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg &#x3D; &#x2F;\\d&#123;2&#125;&#x2F;;&#x2F;&#x2F;&#123;n&#125;</span><br><span class=\"line\">console.log(reg.test(&#39;2&#39;));&#x2F;&#x2F;false</span><br><span class=\"line\">console.log(reg.test(&#39;23&#39;));&#x2F;&#x2F;true</span><br><span class=\"line\">console.log(reg.test(&#39;234&#39;));&#x2F;&#x2F;true  开始字符为2  结束字符为3</span><br><span class=\"line\">console.log(reg.test(&#39;ww234&#39;));&#x2F;&#x2F;true 开始字符为2  结束字符为3</span><br><span class=\"line\"></span><br><span class=\"line\">var reg &#x3D; &#x2F;^\\d&#123;2&#125;$&#x2F;;&#x2F;&#x2F;&#123;n&#125;</span><br><span class=\"line\">console.log(reg.test(&#39;2&#39;));&#x2F;&#x2F;false</span><br><span class=\"line\">console.log(reg.test(&#39;23&#39;));&#x2F;&#x2F;true</span><br><span class=\"line\">console.log(reg.test(&#39;234&#39;));&#x2F;&#x2F;false  开始字符为2  结束字符为4</span><br><span class=\"line\">console.log(reg.test(&#39;ab234&#39;));&#x2F;&#x2F;false 开始字符为a  结束字符为4</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"正则对象的创建方式\"><a href=\"#正则对象的创建方式\" class=\"headerlink\" title=\"正则对象的创建方式\"></a>正则对象的创建方式</h2><h3 id=\"1、new-RegExp\"><a href=\"#1、new-RegExp\" class=\"headerlink\" title=\"1、new RegExp()\"></a>1、new RegExp()</h3><p>RegExp(reg,msg) 参数一：正则表达式</p>\n<p> 参数二：附加条件（如：i 忽略大小写，g 全局匹配）</p>\n<p>实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg &#x3D; new RegExp(&#39;\\\\w+&#39;,&#39;ig&#39;);  &#x2F;&#x2F;注意，此处第一个\\是转义字符，因为参数一不能直接传入正则表达式</span><br><span class=\"line\">var reg &#x3D; new RegExp(&#39;[a-z]&#39;,&#39;ig&#39;);</span><br><span class=\"line\">var str &#x3D; &quot;AaaC2_&quot;;</span><br><span class=\"line\">console.log(reg.test(str));&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、简写\"><a href=\"#2、简写\" class=\"headerlink\" title=\"2、简写\"></a>2、简写</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg &#x3D; &#x2F;[a-z]&#x2F;ig;</span><br><span class=\"line\">var str &#x3D; &quot;AaaC2_&quot;;</span><br><span class=\"line\">console.log(reg.test(str));&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"正则对象的方法\"><a href=\"#正则对象的方法\" class=\"headerlink\" title=\"正则对象的方法\"></a>正则对象的方法</h2><p>RegExp.test(‘字符串’); 判断字符串知否满足正则表达式 返回布尔值</p>\n<p>RegExp.exec(‘字符串’); 判断字符串知否满足正则表达式 将找到的内容以数组的形式返回</p>\n<p>1、不使用 “<code>g</code>“ 标志时,每次都返回第一个找的内容 而不继续向后查找</p>\n<p>2、当正则表达式使用 “<code>g</code>“ 标志时，可以多次执行 <code>exec</code> 方法来查找同一个字符串中的成功匹配。当你这样做时，查找将从正则表达式的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\"><code>lastIndex</code></a> 属性指定的位置开始</p>\n<p><strong>lastIndex</strong>:</p>\n<p>只有正则表达式使用了表示全局检索的 “<code>g</code>“ 标志时，该属性才会起作用。此时应用下面的规则：</p>\n<ul>\n<li>如果 <code>lastIndex</code> 大于字符串的长度，则 <code>regexp.test</code> 和 <code>regexp.exec</code> 将会匹配失败，然后 <code>lastIndex</code> 被设置为 0。</li>\n<li>如果 <code>lastIndex</code> 等于字符串的长度，且该正则表达式匹配空字符串，则该正则表达式匹配从 <code>lastIndex</code> 开始的字符串。（then the regular expression matches input starting at <code>lastIndex</code>.）</li>\n<li>如果 <code>lastIndex</code> 等于字符串的长度，且该正则表达式不匹配空字符串 ，则该正则表达式不匹配字符串，<code>lastIndex</code> 被设置为 0.。</li>\n<li>否则，<code>lastIndex</code> 被设置为紧随最近一次成功匹配的下一个位置。</li>\n</ul>\n<p>实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;找出所有三个英文字母组成的  并且以A开头的单词</span><br><span class=\"line\">var str &#x3D; &#39;Asd Asss wes sgetgs x Adv Wdf&#39;;</span><br><span class=\"line\">var reg &#x3D; &#x2F;\\bA[A-Za-z]&#123;2&#125;\\b&#x2F;g;</span><br><span class=\"line\">console.log(reg.lastIndex);&#x2F;&#x2F;初始值为0</span><br><span class=\"line\">var word &#x3D; reg.exec(str);&#x2F;&#x2F;￥1￥</span><br><span class=\"line\">console.log(reg.lastIndex);&#x2F;&#x2F;3</span><br><span class=\"line\">while(word)&#123;</span><br><span class=\"line\">    console.log(word);</span><br><span class=\"line\">    word &#x3D; reg.exec(str);&#x2F;&#x2F;￥2￥</span><br><span class=\"line\">    console.log(reg.lastIndex);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">onsole.log(word);&#x2F;&#x2F;null</span><br><span class=\"line\">console.log(reg.lastIndex);&#x2F;&#x2F;0</span><br></pre></td></tr></table></figure>\n\n<p>该函数运行的实质：exec每一次执行都有开始位置，而这个开始位置是由RegExp对象的lastIndex属性值所决定的；</p>\n<p>以下为该段代码的执行顺序与解析：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、reg.lastIndex 的初始值为0</span><br><span class=\"line\"></span><br><span class=\"line\">2、执行￥1￥处的exec时，当前的lastIndex数值为0，则exec从字符串的0位置（即A字符）开始。执行结束，将**所找的字符串**（Asd）以数组的形式返回给word，并修改reg.lastIndex的值为&quot; **所找到的字符串最后一个的位置的下一个位置** &quot;（也就是d下标加一，为3），</span><br><span class=\"line\"></span><br><span class=\"line\">3、执行while循环，word此时为[Asd]数组，while语句判断成功</span><br><span class=\"line\"></span><br><span class=\"line\">4、执行￥2￥处的exec，此时reg.lastIndex为3，则从字符串中下标为3的字符开始执行，找到 &quot;Adv&quot;,  v的下标为24，则reg.lastIndex的值被设置为25，word此时为[Adv]数组</span><br><span class=\"line\"></span><br><span class=\"line\">5、判断while 成功</span><br><span class=\"line\"></span><br><span class=\"line\">6、执行￥2￥处的exec，此时reg.lastIndex为25，则从字符串中下标为25的字符开始执行，未找到满足条件的内容，则返回null给word，并将reg.lastIndex设为0；</span><br><span class=\"line\"></span><br><span class=\"line\">7、判断while,此时word为null，判断失败，则跳出循环</span><br><span class=\"line\"></span><br><span class=\"line\">8、程序结束</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"懒惰模式与贪婪模式\"><a href=\"#懒惰模式与贪婪模式\" class=\"headerlink\" title=\"懒惰模式与贪婪模式\"></a>懒惰模式与贪婪模式</h2><p>懒惰模式：在满足条件的前提下，尽可能<strong>少</strong>的匹配字符</p>\n<p>贪婪模式：在满足条件的前提下，尽可能<strong>多</strong>的匹配字符</p>\n<p>正则表达式的量词有：* + ？ {}</p>\n<p>量词默认是贪婪模式，当在量词之后加上?时，将贪婪模式转换为懒惰模式。</p>\n<h2 id=\"分组提取\"><a href=\"#分组提取\" class=\"headerlink\" title=\"分组提取\"></a>分组提取</h2><p>正则中（）表示分组</p>\n<p>若存在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">((((a))((b)))(c))</span><br></pre></td></tr></table></figure>\n\n<p>则第一组；(((a))((b)))(c)</p>\n<p>第二组：((a))</p>\n<p>第三组：(a)</p>\n<p>第四组：(b)</p>\n<p>第五组：(c)</p>\n<p>找法：从左往右找左括号(</p>\n<p>实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg &#x3D; &#x2F;((\\d+)(\\w+))&#x2F;;</span><br><span class=\"line\">var str &#x3D; &quot;123abc_c&quot;</span><br><span class=\"line\">if(reg.test(str))&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;$后的数字 类似数组的下标</span><br><span class=\"line\">\tconsole.log(RegExp.$1);&#x2F;&#x2F;获得第一组(\\d+)(\\w+)的内容  则是123abc_c</span><br><span class=\"line\">    console.log(RegExp.$2);&#x2F;&#x2F;获得第二组(\\d+)的内容  则是123</span><br><span class=\"line\">    console.log(RegExp.$3);&#x2F;&#x2F;获得第二组(\\w+)的内容  则是abc_c</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串中正则的使用\"><a href=\"#字符串中正则的使用\" class=\"headerlink\" title=\"字符串中正则的使用\"></a>字符串中正则的使用</h2><p>方法：</p>\n<table>\n<thead>\n<tr>\n<th><strong>String.match(正则对象)</strong></th>\n<th><strong>返回符合正则条件的集合</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>String.replace(正则对象,”替换的字符串”)</strong></td>\n<td><strong>替换字符串，若要全局替换，正则对象要加g</strong></td>\n</tr>\n<tr>\n<td><strong>String.search(正则对象)</strong></td>\n<td><strong>查找字符串，返回查找内容的第一次出现的位置</strong></td>\n</tr>\n<tr>\n<td><strong>String.split(正则对象)</strong></td>\n<td><strong>切割字符串，返回切割后的数组</strong></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;match</span><br><span class=\"line\">var str&#x3D;&quot;abc123ee23f90&quot;;</span><br><span class=\"line\">&#x2F;&#x2F;将字符串中所有出现的每一个数字提取出来</span><br><span class=\"line\">var arr &#x3D;  str.match(&#x2F;\\d&#x2F;g);</span><br><span class=\"line\">console.log(arr);</span><br><span class=\"line\">&#x2F;&#x2F;将字符串中所有出现的连续的数字提取出来</span><br><span class=\"line\">var arr &#x3D;  str.match(&#x2F;\\d+&#x2F;g);</span><br><span class=\"line\">console.log(arr);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;replace</span><br><span class=\"line\">&#x2F;&#x2F;替换所有 - +</span><br><span class=\"line\">var str &#x3D; &quot;a-b-+b-c&quot;;</span><br><span class=\"line\">console.log(str.replace(&#x2F;-|\\+&#x2F;g,&quot;*&quot;));&#x2F;&#x2F;结果a*b**b*c</span><br><span class=\"line\">&#x2F;&#x2F;若不加g  则结果为a*b-+b-c</span><br><span class=\"line\">&#x2F;&#x2F;search</span><br><span class=\"line\">&#x2F;&#x2F;忽略大小写  找到第一个b的下标</span><br><span class=\"line\">var str &#x3D; &quot;a-b-b-c&quot;;</span><br><span class=\"line\">console.log(str.search(&#x2F;B&#x2F;i));&#x2F;&#x2F;结果2</span><br><span class=\"line\">&#x2F;&#x2F;split</span><br><span class=\"line\">var str&#x3D;&quot;a|b|c|&quot;;</span><br><span class=\"line\">console.log(str.split(&#x2F;\\|&#x2F;));&#x2F;&#x2F;结果  &quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;&quot;</span><br></pre></td></tr></table></figure>","text":"正则表达式正则就是对字符串进行查找、匹配、替换等操作的一串“规则字符串”使用方法：在一对斜杠之间添加正则表达式 如：**/** 正则表达式 /正则表达式的组成普通字符特殊字符（元字符）：正则表达式中具有特殊意义的字符元字符\\d表示数字\\D非数字\\s空格符\\S非空格符\\w字母或数字","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"Canvas的基本使用","slug":"Canvas的基本使用","date":"2020-10-08T09:35:13.000Z","updated":"2021-03-08T09:42:45.489Z","comments":true,"path":"api/articles/Canvas的基本使用.json","excerpt":"","keywords":null,"cover":"https://howlcn1997.github.io/2019/08/19/canvas%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/location.jpg","content":"<h1 id=\"Canvas的基本使用\"><a href=\"#Canvas的基本使用\" class=\"headerlink\" title=\"Canvas的基本使用\"></a>Canvas的基本使用</h1><blockquote>\n<p>canvas 最早由Apple引入WebKit,用于Mac OS X 的 Dashboard,后来又在Safari和Google Chrome被实现。<br>基于 Gecko 1.8的浏览器,比如 Firefox 1.5, 同样支持这个元素。<br><canvas> 元素是WhatWG Web applications 1.0规范的一部分,也包含于HTML 5中。</p>\n</blockquote>\n<h3 id=\"体验Canvas\"><a href=\"#体验Canvas\" class=\"headerlink\" title=\"体验Canvas\"></a>体验Canvas</h3><h4 id=\"什么是Canvas？\"><a href=\"#什么是Canvas？\" class=\"headerlink\" title=\"什么是Canvas？\"></a>什么是Canvas？</h4><p>HTML5 的 canvas 元素使用 JavaScript 在网页上绘制图像。<br>画布是一个矩形区域，您可以控制其每一像素。<br>canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。</p>\n<h4 id=\"创建Canvas元素\"><a href=\"#创建Canvas元素\" class=\"headerlink\" title=\"创建Canvas元素\"></a>创建Canvas元素</h4><p>向 HTML5 页面添加 canvas 元素。<br>规定元素的 id、宽度和高度：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--1.准备画布--&gt;</span><br><span class=\"line\">&lt;!--1.1 画布是白色的 而且默认300*150--&gt;</span><br><span class=\"line\">&lt;!--1.2 设置画布的大小  width&#x3D;&quot;600&quot; height&#x3D;&quot;400&quot; --&gt;</span><br><span class=\"line\">&lt;canvas width&#x3D;&quot;600&quot; height&#x3D;&quot;400&quot; &gt;&lt;&#x2F;canvas&gt;</span><br><span class=\"line\">&lt;!--2.准备绘制工具--&gt;</span><br><span class=\"line\">&lt;!--3.利用工具绘图--&gt;</span><br></pre></td></tr></table></figure>\n\n<p>注意：canvas的大小要在标签内定义，否则会出现意料之外的效果。</p>\n<h4 id=\"Canvas坐标系\"><a href=\"#Canvas坐标系\" class=\"headerlink\" title=\"Canvas坐标系\"></a>Canvas坐标系</h4><p><img src=\"https://howlcn1997.github.io/2019/08/19/canvas%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/location.jpg\" alt=\"img\"></p>\n<h4 id=\"通过JavaScript来绘制\"><a href=\"#通过JavaScript来绘制\" class=\"headerlink\" title=\"通过JavaScript来绘制\"></a>通过JavaScript来绘制</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*获取元素*&#x2F;</span><br><span class=\"line\">var myCanvas &#x3D; document.querySelector(&#39;#myCanvas&#39;);</span><br><span class=\"line\">&#x2F;*获取上下文 绘制工具箱 *&#x2F;</span><br><span class=\"line\">&#x2F;*目前canvas只支持2d*&#x2F;</span><br><span class=\"line\">&#x2F;*若要达到3d效果，需要想象一个3d坐标系后，再投影到canvas上*&#x2F;</span><br><span class=\"line\">&#x2F;*或者配合WebGL达到3d效果*&#x2F;</span><br><span class=\"line\">var context &#x3D; myCanvas.getContext(&#39;2d&#39;);</span><br><span class=\"line\">&#x2F;*设置绘图的起始位置*&#x2F;</span><br><span class=\"line\">context.moveTo(100,100);</span><br><span class=\"line\">&#x2F;*绘制路径*&#x2F;</span><br><span class=\"line\">context.lineTo(200,200);</span><br><span class=\"line\">&#x2F;*描边*&#x2F;</span><br><span class=\"line\">context.stroke();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Canvas的基本使用-1\"><a href=\"#Canvas的基本使用-1\" class=\"headerlink\" title=\"Canvas的基本使用\"></a>Canvas的基本使用</h3><h4 id=\"图形绘制\"><a href=\"#图形绘制\" class=\"headerlink\" title=\"图形绘制\"></a>图形绘制</h4><p>1、开启新的路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.beginPath();</span><br></pre></td></tr></table></figure>\n\n<p>2、画路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.moveTo(100,100);  &#x2F;&#x2F;将画笔放置在100px 100px的位置</span><br><span class=\"line\">ctx.lineTo(200,100);  &#x2F;&#x2F;从（100，100）向（200，100）画一条轨迹</span><br><span class=\"line\">ctx.lineTo(200,200);  &#x2F;&#x2F;从（200，100）向（200，200）画一条轨迹</span><br></pre></td></tr></table></figure>\n\n<p>此时，是看不出线条的，因为此时仅仅是一条没有颜色的轨迹。</p>\n<p>3、给路径描边（上色）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.strokeStyle &#x3D; &quot;red&quot;; &#x2F;&#x2F;设置画笔颜色</span><br><span class=\"line\">ctx.stroke();  &#x2F;&#x2F;开始描边</span><br></pre></td></tr></table></figure>\n\n<p>4、闭合路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.closePath();  &#x2F;&#x2F;将路径的起点与终点连接</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"填充规则-非零环绕\"><a href=\"#填充规则-非零环绕\" class=\"headerlink\" title=\"填充规则(非零环绕)\"></a>填充规则(非零环绕)</h4><p><img src=\"https://howlcn1997.github.io/2019/08/19/canvas%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/zero.jpg\" alt=\"img\"></p>\n<h4 id=\"设置样式\"><a href=\"#设置样式\" class=\"headerlink\" title=\"设置样式\"></a>设置样式</h4><h5 id=\"画笔的状态\"><a href=\"#画笔的状态\" class=\"headerlink\" title=\"画笔的状态\"></a>画笔的状态</h5><ul>\n<li><p>lineWidth 线宽，默认1</p>\n</li>\n<li><p>lineCap 线末端类型：(butt默认)、round、square</p>\n<p><img src=\"https://howlcn1997.github.io/2019/08/19/canvas%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/lineCap.png\" alt=\"lineJoin\"></p>\n</li>\n<li><p>lineJoin 相交线的拐点 miter(默认)、round、bevel</p>\n<p><img src=\"https://howlcn1997.github.io/2019/08/19/canvas%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/lineJoin.png\" alt=\"lineJoin\"></p>\n</li>\n<li><p>strokeStyle 线的颜色</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.strokeStyle &#x3D; &quot;blue&quot;;</span><br></pre></td></tr></table></figure></li>\n<li><p>fillStyle 填充颜色</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.fillStyle  &#x3D; &quot;blue&quot;;</span><br></pre></td></tr></table></figure></li>\n<li><p>setLineDash() 设置虚线</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.setLineDash([50,10]);</span><br></pre></td></tr></table></figure>\n\n<p>setLineDash方法规定虚线的特征，它的参数是一个具有两个元素的数组。</p>\n<p>第一个数组元素规定虚线尺寸，也就是我们可见的部分，比如上面的红色小线段。</p>\n<p>第二个数组元素规定虚线与虚线之间的间隔，通过线段与间隔交替出现，构成了一个完整的虚线。</p>\n</li>\n<li><p>getLineDash() 获取虚线宽度集合</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(ctx.getLineDash());</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：<code>(2) [500, 10]</code></p>\n</li>\n<li><p>lineDashOffset 设置虚线偏移量（负值向右偏移）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*如果是正的值 往后偏移*&#x2F;</span><br><span class=\"line\">&#x2F;*如果是负的值 往前偏移*&#x2F;</span><br><span class=\"line\">&#x2F;*ctx.lineDashOffset &#x3D; 10;*&#x2F;</span><br><span class=\"line\">ctx.lineDashOffset &#x3D; -10;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"线性颜色渐变填充\"><a href=\"#线性颜色渐变填充\" class=\"headerlink\" title=\"线性颜色渐变填充\"></a>线性颜色渐变填充</h5><ul>\n<li><p>利用循环绘制从黑道白道的渐变</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.lineWidth &#x3D; 30;</span><br><span class=\"line\">for (var i &#x3D; 0; i &lt; 255; i++) &#123;</span><br><span class=\"line\">    ctx.beginPath();</span><br><span class=\"line\">    ctx.moveTo(100+i-1,100);</span><br><span class=\"line\">    ctx.lineTo(100+i,100);</span><br><span class=\"line\">    ctx.strokeStyle &#x3D; &#39;rgb(&#39;+i+&#39;,&#39;+i+&#39;,&#39;+i+&#39;)&#39;;</span><br><span class=\"line\">    ctx.stroke();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>createLinearGradient</p>\n<p>1、先利用createLinearGradient创建出一个颜色渐变的样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*1、确定渐变方向*&#x2F;</span><br><span class=\"line\">&#x2F;*渐变起点x  起点y   终点x  终点y*&#x2F;</span><br><span class=\"line\">&#x2F;*由（100px,100px）渐变至（500,400px）*&#x2F;</span><br><span class=\"line\">var linearGradient &#x3D; ctx.createLinearGradient(100,100,500,400);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;*调节起始与终止点的位置  使之在水平对齐  渐变效果为由上而下渐变*&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; var linearGradient &#x3D; ctx.createLinearGradient(100,150,200,150);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;*调节起始与终止点的位置  使之在垂直对齐  渐变效果为由左而右渐变*&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; var linearGradient &#x3D; ctx.createLinearGradient(250,100,250,200);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;*2、确定渐变颜色*&#x2F;</span><br><span class=\"line\">&#x2F;*位置（取值为0~1）   颜色*&#x2F;</span><br><span class=\"line\">linearGradient.addColorStop(0,&#39;pink&#39;);</span><br><span class=\"line\">linearGradient.addColorStop(0.5,&#39;red&#39;);</span><br><span class=\"line\">linearGradient.addColorStop(1,&#39;blue&#39;);</span><br></pre></td></tr></table></figure>\n\n<p>2、给画笔上渐变色！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.fillStyle &#x3D; linearGradient;</span><br></pre></td></tr></table></figure>\n\n<p>3、填充</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.rect(0,0,200,100);</span><br><span class=\"line\">ctx.fill();  &#x2F;&#x2F;对stroke()失效</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"径向颜色渐变填充\"><a href=\"#径向颜色渐变填充\" class=\"headerlink\" title=\"径向颜色渐变填充\"></a>径向颜色渐变填充</h5><ul>\n<li><p>createRadialGradient(x0,y0,r0,x1,y1,r1,x2,y2,r2……)</p>\n<p>x0,y0,r0 第一个圆 圆心的x，圆心的y，圆心的半径</p>\n<p>。。。以此类推</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var canvas &#x3D; document.getElementById(&quot;myCanvas&quot;);</span><br><span class=\"line\">var ctx &#x3D; canvas.getContext(&quot;2d&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;绘制一个以坐标点(100,100)为圆心、半径为50px的圆形</span><br><span class=\"line\">ctx.arc(100, 100, 50, 0, Math.PI * 2, false);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;创建一个表示放射性颜色渐变的CanvasGradient对象</span><br><span class=\"line\">&#x2F;&#x2F;该对象的作用域是以(100,100)为圆心、半径为10px的内圆和以(100,100)为圆心、半径为50px的外圆之间的环状区域</span><br><span class=\"line\">var canvasGradient &#x3D; ctx.createRadialGradient(100, 100, 10, 80, 100, 80);</span><br><span class=\"line\">&#x2F;&#x2F;在offset为0的位置(即内圆的圆圈处)添加一个蓝色的渐变</span><br><span class=\"line\">canvasGradient.addColorStop(0, &quot;blue&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;在offset为0.5的位置(环状区域从内到外放射50%的中间位置)添加一个绿色的渐变</span><br><span class=\"line\">canvasGradient.addColorStop(0.5, &quot;pink&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;在offset为0的位置(即外圆的圆圈处)添加一个红色的渐变</span><br><span class=\"line\">canvasGradient.addColorStop(1, &quot;orange&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;将fillStyle的属性值设为该CanvasGradient对象</span><br><span class=\"line\">ctx.fillStyle &#x3D; canvasGradient;</span><br><span class=\"line\">ctx.fill();</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Canvas图形绘制\"><a href=\"#Canvas图形绘制\" class=\"headerlink\" title=\"Canvas图形绘制\"></a>Canvas图形绘制</h3><h4 id=\"矩形绘制\"><a href=\"#矩形绘制\" class=\"headerlink\" title=\"矩形绘制\"></a>矩形绘制</h4><ul>\n<li><p>rect(x,y,w,h) 只创造出矩形而不绘制（stroke fill），也不结束绘画</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.rect(100,100,200,100); &#x2F;&#x2F;左上角x轴坐标  左上角y轴坐标 宽 高</span><br></pre></td></tr></table></figure></li>\n<li><p>strokeRect(x,y,w,h) 有独立路径，会自动绘制（stroke），自动结束绘画，不影响下次绘画。</p>\n</li>\n<li><p>fillRect(x,y,w,h) 有独立路径，不影响别的绘制</p>\n</li>\n<li><p>clearRect(x,y,w,h) 擦除矩形区域</p>\n<h4 id=\"圆弧绘制\"><a href=\"#圆弧绘制\" class=\"headerlink\" title=\"圆弧绘制\"></a>圆弧绘制</h4><p>arc(x,y,r,startAngle,endAngle,anticlockwise)</p>\n<ul>\n<li>x 圆心横坐标</li>\n<li>y 圆心纵坐标</li>\n<li>r 半径</li>\n<li>startAngle 开始角度</li>\n<li>endAngle 结束角度</li>\n<li>anticlockwise 是否逆时针方向绘制（默认false表示顺时针；true表示逆时针）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.arc(200,200,150,0,Math.PI&#x2F;3,false);  &#x2F;&#x2F;默认 顺时针</span><br><span class=\"line\">&#x2F;&#x2F; context.arc(w&#x2F;2,h&#x2F;2,150,0,Math.PI&#x2F;3,true);  &#x2F;&#x2F;逆时针</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"扇形的绘制\"><a href=\"#扇形的绘制\" class=\"headerlink\" title=\"扇形的绘制\"></a>扇形的绘制</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.moveTo(200,200);</span><br><span class=\"line\">&#x2F;&#x2F; arc是紧接着上一次笔触的地方开始画</span><br><span class=\"line\">&#x2F;&#x2F; ctx.beginPath();  &#x2F;&#x2F;当重新开始路劲时效果会发生变化</span><br><span class=\"line\">ctx.arc(200,200,100,0,Math.PI&#x2F;3,true);  &#x2F;&#x2F;这里暗含着 lineTo(300,200);</span><br><span class=\"line\">ctx.closePath();</span><br><span class=\"line\">ctx.stroke();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"绘制文本\"><a href=\"#绘制文本\" class=\"headerlink\" title=\"绘制文本\"></a>绘制文本</h4><ul>\n<li>ctx.font = ‘微软雅黑’ 设置字体</li>\n<li>strokeText()</li>\n<li>fillText(text,x,y,maxWidth)<ul>\n<li>text 要绘制的文本</li>\n<li>x,y 文本绘制的坐标（文本左下角）</li>\n<li>maxWidth 设置文本最大宽度，可选参数</li>\n</ul>\n</li>\n</ul>\n<p> ctx.textAlign文本水平对齐方式，相对绘制坐标来说的</p>\n<ul>\n<li>left</li>\n<li>center</li>\n<li>right</li>\n<li>start 默认</li>\n<li>end</li>\n</ul>\n<p>ctx.direction属性css(rtl ltr) start和end于此相关</p>\n<ul>\n<li>如果是ltr,start和left表现一致</li>\n<li>如果是rtl,start和right表现一致</li>\n</ul>\n<p>ctx.textBaseline 设置基线（垂直对齐方式 ）</p>\n<ul>\n<li>top 文本的基线处于文本的正上方，并且有一段距离</li>\n<li>middle 文本的基线处于文本的正中间</li>\n<li>bottom 文本的基线处于文本的证下方，并且有一段距离</li>\n<li>hanging 文本的基线处于文本的正上方，并且和文本粘合</li>\n<li>alphabetic 默认值，基线处于文本的下方，并且穿过文字</li>\n<li>ideographic 和bottom相似，但是不一样</li>\n<li>measureText() 获取文本宽度obj.width</li>\n</ul>\n<h3 id=\"贝塞尔曲线\"><a href=\"#贝塞尔曲线\" class=\"headerlink\" title=\"贝塞尔曲线\"></a>贝塞尔曲线</h3><h4 id=\"数学公式\"><a href=\"#数学公式\" class=\"headerlink\" title=\"数学公式\"></a>数学公式</h4><p><img src=\"https://howlcn1997.github.io/2019/08/19/canvas%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/01base.gif\" alt=\"01base\"></p>\n<p><img src=\"https://howlcn1997.github.io/2019/08/19/canvas%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/02base.gif\" alt=\"02base\"></p>\n<p>一个点确定曲线（一次）</p>\n<p><img src=\"https://howlcn1997.github.io/2019/08/19/canvas%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/bezier02.gif\" alt=\"bezier02\"></p>\n<p>两个点确定曲线（二次）</p>\n<p><img src=\"https://howlcn1997.github.io/2019/08/19/canvas%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/bezier03.gif\" alt=\"bezier03\"></p>\n<p>三个点确定曲线（三次）</p>\n<p><img src=\"https://howlcn1997.github.io/2019/08/19/canvas%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/bezier04.gif\" alt=\"bezier04\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas id&#x3D;&quot;canvas&quot; width&#x3D;&quot;500px&quot; height&#x3D;&quot;500px&quot;&gt;&lt;&#x2F;canvas&gt;</span><br><span class=\"line\">&#x2F;&#x2F;1.拿到画布</span><br><span class=\"line\">var canvas &#x3D; document.getElementById(&quot;canvas&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;2.拿到画布的上下文</span><br><span class=\"line\">var context &#x3D; canvas.getContext(&#39;2d&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;3.一次贝塞尔曲线</span><br><span class=\"line\">context.beginPath();</span><br><span class=\"line\">context.moveTo(300,100);</span><br><span class=\"line\">context.quadraticCurveTo(100, 100, 300, 300);</span><br><span class=\"line\">context.stroke();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;4.二次贝塞尔曲线</span><br><span class=\"line\">context.beginPath();</span><br><span class=\"line\">context.moveTo(300,100);</span><br><span class=\"line\">context.bezierCurveTo(100, 100, 300, 300,200,400);</span><br><span class=\"line\">context.stroke();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"做动画\"><a href=\"#做动画\" class=\"headerlink\" title=\"做动画\"></a>做动画</h3><h4 id=\"绘制图片\"><a href=\"#绘制图片\" class=\"headerlink\" title=\"绘制图片\"></a>绘制图片</h4><h5 id=\"创建图片对象\"><a href=\"#创建图片对象\" class=\"headerlink\" title=\"创建图片对象\"></a>创建图片对象</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var img &#x3D; new Image();</span><br><span class=\"line\">img.src &#x3D; &quot;.&#x2F;image&#x2F;img1.jpg&quot;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;图片加载完毕 触发事件</span><br><span class=\"line\">img.onload() &#x3D; function()&#123;</span><br><span class=\"line\">\t&#x2F;&#x2F;ctx.drawImage();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h5><p>drawImage()<br>     三个参数drawImage(img,x,y)<br>        img 图片对象、canvas对象、video对象<br>        x,y 图片绘制的左上角<br>    五个参数drawImage(img,x,y,w,h)<br>        img 图片对象、canvas对象、video对象<br>        x,y 图片绘制的左上角<br>        w,h 图片绘制尺寸设置(图片缩放，不是截取)<br>    九个参数drawImage(img,x,y,w,h,x1,y1,w1,h1)<br>        img 图片对象、canvas对象、video对象<br>        x,y,w,h 图片中的一个矩形区域（从图片上截取一部分）<br>        x1,y1,w1,h1 画布中的一个矩形区域</p>\n","text":"Canvas的基本使用canvas 最早由Apple引入WebKit,用于Mac OS X 的 Dashboard,后来又在Safari和Google Chrome被实现。<br>基于 Gecko 1.8的浏览器,比如 Firefox 1.5, 同样支持这个元素。<br> 元素是","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"Javascript 日常记录","slug":"Javascript-日常记录","date":"2020-09-14T09:34:05.000Z","updated":"2021-03-08T09:43:02.373Z","comments":true,"path":"api/articles/Javascript-日常记录.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"Javascript-日常记录\"><a href=\"#Javascript-日常记录\" class=\"headerlink\" title=\"Javascript 日常记录\"></a>Javascript 日常记录</h1><h2 id=\"1、【数组去重】-四行代码\"><a href=\"#1、【数组去重】-四行代码\" class=\"headerlink\" title=\"1、【数组去重】 四行代码\"></a>1、【数组去重】 四行代码</h2><p>原理：利用Js中对象的属性名不可重复的特点对数组进行去重操作</p>\n<p>若有数组:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr &#x3D; [&#39;a&#39;,&#39;v&#39;,&#39;a&#39;,&#39;b&#39;,&#39;e&#39;,&#39;b&#39;,&#39;w&#39;,&#39;x&#39;]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var object &#x3D; &#123;&#125;;</span><br><span class=\"line\">    for(var key in arr)</span><br><span class=\"line\">        if(!object[arr[key]])</span><br><span class=\"line\">            object[arr[key]] &#x3D; 1;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object</span><br><span class=\"line\">    a: 1</span><br><span class=\"line\">    b: 1</span><br><span class=\"line\">    e: 1</span><br><span class=\"line\">    v: 1</span><br><span class=\"line\">    w: 1</span><br><span class=\"line\">    x: 1</span><br></pre></td></tr></table></figure>\n\n<p>此时object对象中的属性名便是去重后的结果。</p>\n<h2 id=\"2、在字符串中找到所有的字符-o，并返回其下标\"><a href=\"#2、在字符串中找到所有的字符-o，并返回其下标\" class=\"headerlink\" title=\"2、在字符串中找到所有的字符 o，并返回其下标\"></a>2、在字符串中找到所有的字符 o，并返回其下标</h2><p>若有字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s &#x3D; &#39;oresdfrgosdfsdo&#39;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;script&gt;  </span><br><span class=\"line\">\tvar index &#x3D; -1;</span><br><span class=\"line\">    while(true)&#123;</span><br><span class=\"line\">        index &#x3D; s.indexOf(&quot;o&quot;,index+1)</span><br><span class=\"line\">        if(index &#x3D;&#x3D; -1)</span><br><span class=\"line\">            break;</span><br><span class=\"line\">            console.log(index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">8</span><br><span class=\"line\">14</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>2019 年 10 月 24 日 更新</p>\n<h2 id=\"3、返回给定参数的数据类型\"><a href=\"#3、返回给定参数的数据类型\" class=\"headerlink\" title=\"3、返回给定参数的数据类型\"></a>3、返回给定参数的数据类型</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">*\tgetType</span><br><span class=\"line\">*\t@description 返回给定参数的数据类型</span><br><span class=\"line\">*\t@param &#123;Any&#125; 需要做类型检测的参数</span><br><span class=\"line\">*\t@return &#123;String&#125;</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">function getType(args)&#123;</span><br><span class=\"line\">    if (typeof arg &#x3D;&#x3D;&#x3D; &#39;number&#39; &amp;&amp; isNaN(arg)) return &#39;NaN&#39;;</span><br><span class=\"line\">    let reg &#x3D; &#x2F;\\s(\\w&#123;1,&#125;)\\]$&#x2F;g;</span><br><span class=\"line\">    let str &#x3D; Object.prototype.toString.call(args);</span><br><span class=\"line\">    let type &#x3D; reg.exec(str)[1];</span><br><span class=\"line\">    return type</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a &#x3D; 1;</span><br><span class=\"line\">var b &#x3D; false;</span><br><span class=\"line\">var c &#x3D; &#39;ss&#39;;</span><br><span class=\"line\">var d;</span><br><span class=\"line\">var e &#x3D; null;</span><br><span class=\"line\">var f &#x3D; NaN;</span><br><span class=\"line\">var g &#x3D; &#123;&#125;;</span><br><span class=\"line\">var h &#x3D; () &#x3D;&gt; &#123;&#125;</span><br><span class=\"line\">var i &#x3D; [];</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(checkType(a));</span><br><span class=\"line\">console.log(checkType(b));</span><br><span class=\"line\">console.log(checkType(c));</span><br><span class=\"line\">console.log(checkType(d));</span><br><span class=\"line\">console.log(checkType(e));</span><br><span class=\"line\">console.log(checkType(f));</span><br><span class=\"line\">console.log(checkType(g));</span><br><span class=\"line\">console.log(checkType(h));</span><br><span class=\"line\">console.log(checkType(i));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、什么时候-val-1-amp-amp-val-2-amp-amp-val-3-为-true？\"><a href=\"#4、什么时候-val-1-amp-amp-val-2-amp-amp-val-3-为-true？\" class=\"headerlink\" title=\"4、什么时候 val === 1 &amp;&amp; val === 2 &amp;&amp; val === 3 为 true？\"></a>4、什么时候 val === 1 &amp;&amp; val === 2 &amp;&amp; val === 3 为 true？</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i&#x3D; 0;</span><br><span class=\"line\">Object.defineProperty(window,&#39;val&#39;,&#123;</span><br><span class=\"line\">    get:function()&#123;</span><br><span class=\"line\">        return ++i;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set:function()&#123;</span><br><span class=\"line\">        console.log(&#39;set&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(val &#x3D;&#x3D;&#x3D; 1 &amp;&amp; val &#x3D;&#x3D;&#x3D; 2 &amp;&amp; val &#x3D;&#x3D;&#x3D; 3);</span><br></pre></td></tr></table></figure>","text":"Javascript 日常记录1、【数组去重】 四行代码原理：利用Js中对象的属性名不可重复的特点对数组进行去重操作若有数组:1<br>arr &#x3D; [&#39;a&#39;,&#39;v&#39;,&#39;a&#39;,&#39;b&#39;,&#39;e&#39;,","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"url.js","slug":"url-js","date":"2020-09-02T06:32:22.000Z","updated":"2021-03-08T09:43:05.932Z","comments":true,"path":"api/articles/url-js.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"URL-js\"><a href=\"#URL-js\" class=\"headerlink\" title=\"URL.js\"></a>URL.js</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><blockquote>\n<p>URI.js是一个用于处理URL的JavaScript库。可以对URI进行解析， 它提供了一个 jQuery风格 API（Fluent Interface，Method Chaining）来读写所有常规组件和一些方便的方法，如.directory（）和.authority（）。</p>\n<p>URI.js提供了简单但强大的查询字符串处理方式，具有许多URI规范化函数并转换相对/绝对路径。</p>\n<p>而URI.js提供了一个jQuery插件。 URI.js本身不依赖于 jQuery 。 您不需要jQuery来使用URI.js</p>\n</blockquote>\n<h2 id=\"API示例\"><a href=\"#API示例\" class=\"headerlink\" title=\"API示例\"></a>API示例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URI(&quot;http:&#x2F;&#x2F;example.org&#x2F;foo.html?hello&#x3D;world&quot;)</span><br><span class=\"line\">    .username(&quot;rodneyrehm&quot;)</span><br><span class=\"line\">&#x2F;&#x2F; -&gt; http:&#x2F;&#x2F;rodneyrehm@example.org&#x2F;foo.html?hello&#x3D;world</span><br><span class=\"line\">    .username(&quot;&quot;)</span><br><span class=\"line\">&#x2F;&#x2F; -&gt; http:&#x2F;&#x2F;example.org&#x2F;foo.html?hello&#x3D;world</span><br><span class=\"line\">    .directory(&quot;bar&quot;)</span><br><span class=\"line\">&#x2F;&#x2F; -&gt; http:&#x2F;&#x2F;example.org&#x2F;bar&#x2F;foo.html?hello&#x3D;world   添加路径</span><br><span class=\"line\">    .suffix(&quot;xml&quot;)</span><br><span class=\"line\">&#x2F;&#x2F; -&gt; http:&#x2F;&#x2F;example.org&#x2F;bar&#x2F;foo.xml?hello&#x3D;world    添加后缀</span><br><span class=\"line\">    .query(&quot;&quot;)</span><br><span class=\"line\">&#x2F;&#x2F; -&gt; http:&#x2F;&#x2F;example.org&#x2F;bar&#x2F;foo.xml                添加查询条件</span><br><span class=\"line\">    .tld(&quot;com&quot;)</span><br><span class=\"line\">&#x2F;&#x2F; -&gt; http:&#x2F;&#x2F;example.com&#x2F;bar&#x2F;foo.xml                修改域名后缀</span><br><span class=\"line\">    .query(&#123; foo: &quot;bar&quot;, hello: [&quot;world&quot;, &quot;mars&quot;] &#125;);</span><br><span class=\"line\">&#x2F;&#x2F; -&gt; http:&#x2F;&#x2F;example.com&#x2F;bar&#x2F;foo.xml?foo&#x3D;bar&amp;hello&#x3D;world&amp;hello&#x3D;mars</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 简化</span><br><span class=\"line\">URI(&quot;?&amp;foo&#x3D;bar&amp;&amp;foo&#x3D;bar&amp;foo&#x3D;baz&amp;&quot;)</span><br><span class=\"line\">    .normalizeQuery();</span><br><span class=\"line\">&#x2F;&#x2F; -&gt; ?foo&#x3D;bar&amp;foo&#x3D;baz</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 获取相对路径</span><br><span class=\"line\">URI(&quot;&#x2F;foo&#x2F;bar&#x2F;baz.html&quot;)</span><br><span class=\"line\">    .relativeTo(&quot;&#x2F;foo&#x2F;bar&#x2F;world.html&quot;);</span><br><span class=\"line\">&#x2F;&#x2F; -&gt; .&#x2F;baz.html</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 获取绝对路径</span><br><span class=\"line\">URI(&quot;&#x2F;foo&#x2F;bar&#x2F;baz.html&quot;)</span><br><span class=\"line\">    .relativeTo(&quot;&#x2F;foo&#x2F;bar&#x2F;sub&#x2F;world.html&quot;)</span><br><span class=\"line\">&#x2F;&#x2F; -&gt; ..&#x2F;baz.html</span><br><span class=\"line\">    .absoluteTo(&quot;&#x2F;foo&#x2F;bar&#x2F;sub&#x2F;world.html&quot;);</span><br><span class=\"line\">&#x2F;&#x2F; -&gt; &#x2F;foo&#x2F;bar&#x2F;baz.html</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; uri模板</span><br><span class=\"line\">URI.expand(&quot;&#x2F;foo&#x2F;&#123;dir&#125;&#x2F;&#123;file&#125;&quot;, &#123;</span><br><span class=\"line\">    dir: &quot;bar&quot;,</span><br><span class=\"line\">    file: &quot;world.html&quot;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#x2F;&#x2F; -&gt; &#x2F;foo&#x2F;bar&#x2F;world.html</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常用API\"><a href=\"#常用API\" class=\"headerlink\" title=\"常用API\"></a>常用API</h2><h3 id=\"新建\"><a href=\"#新建\" class=\"headerlink\" title=\"新建\"></a>新建</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var uri &#x3D; new URI(); &#x2F;&#x2F;相当于 new URI(location.href)</span><br><span class=\"line\">var uri &#x3D; new URI(&quot;http:&#x2F;&#x2F;example.org&quot;); &#x2F;&#x2F;新建一个uri</span><br><span class=\"line\">var uri &#x3D; new URI(new URI(&quot;http:&#x2F;&#x2F;example.org&quot;)); &#x2F;&#x2F;clone一个uri</span><br><span class=\"line\">var uri &#x3D; new URI(&quot;http:&#x2F;&#x2F;example.org&quot;).clone(); &#x2F;&#x2F;clone一个uri</span><br><span class=\"line\">var uri &#x3D; new URI(&#123;</span><br><span class=\"line\">    protocol: &quot;http&quot;, &#x2F;&#x2F; no trailing :</span><br><span class=\"line\">    username: &quot;user&quot;,</span><br><span class=\"line\">    password: &quot;pass&quot;,</span><br><span class=\"line\">    hostname: &quot;example.org&quot;,</span><br><span class=\"line\">    port: &quot;80&quot;, &#x2F;&#x2F; 这里是string，不是数字</span><br><span class=\"line\">    path: &quot;&#x2F;foo&#x2F;bar.html&quot;,  </span><br><span class=\"line\">    query: &quot;foo&#x3D;bar&amp;bar&#x3D;baz&quot;, &#x2F;&#x2F; 注意，是&quot;query&quot;，不是&quot;search&quot;，而且，不要在前面加&quot;?&quot;</span><br><span class=\"line\">    fragment: &quot;frag&quot; &#x2F;&#x2F; 注意，是&quot;fragment&quot;，不是&quot;hash&quot;，而且，不要在前面加&quot;#&quot;</span><br><span class=\"line\">&#125;); &#x2F;&#x2F;用对象方式新建uri</span><br><span class=\"line\"></span><br><span class=\"line\">var parts &#x3D; &#123;</span><br><span class=\"line\">    protocol: &quot;http&quot;,</span><br><span class=\"line\">    username: null,</span><br><span class=\"line\">    password: null,</span><br><span class=\"line\">    hostname: &quot;example.org&quot;,</span><br><span class=\"line\">    port: null,</span><br><span class=\"line\">    path: &quot;&#x2F;foo.html&quot;,</span><br><span class=\"line\">    query: null,</span><br><span class=\"line\">    fragment: null</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">URI.build(parts) &#x3D;&#x3D;&#x3D; &quot;http:&#x2F;&#x2F;example.org&#x2F;foo.html&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">var parts &#x3D; &#123;</span><br><span class=\"line\">    username: &quot;user&quot;,</span><br><span class=\"line\">    password: &quot;pass&quot;,</span><br><span class=\"line\">    hostname: &quot;example.org&quot;,</span><br><span class=\"line\">    port: &quot;8080&quot;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">URI.buildAuthority(parts) &#x3D;&#x3D;&#x3D; &quot;user:pass@example.org:8080&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">var parts &#x3D; &#123;</span><br><span class=\"line\">    username: &quot;user&quot;,</span><br><span class=\"line\">    password: &quot;pass&quot;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">URI.buildUserinfo(parts) &#x3D;&#x3D;&#x3D; &quot;user:pass@&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">var parts &#x3D; &#123;</span><br><span class=\"line\">    hostname: &quot;example.org&quot;,</span><br><span class=\"line\">    port: &quot;8080&quot;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">URI.buildHost(parts) &#x3D;&#x3D;&#x3D; &quot;example.org:8080&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">var data &#x3D; &#123;</span><br><span class=\"line\">    foo: &quot;bar&quot;,</span><br><span class=\"line\">    hello: [&quot;world&quot;, &quot;mars&quot;, &quot;mars&quot;],</span><br><span class=\"line\">    bam: &quot;&quot;,</span><br><span class=\"line\">    yup: null,</span><br><span class=\"line\">    removed: undefined</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#x2F;&#x2F; 注意，默认情况下，同一个键相同的值会被合并</span><br><span class=\"line\">URI.buildQuery(data) &#x3D;&#x3D;&#x3D; &quot;foo&#x3D;bar&amp;hello&#x3D;world&amp;hello&#x3D;mars&amp;bam&#x3D;&amp;yup&quot;;</span><br><span class=\"line\">&#x2F;&#x2F; 调用时传入true则会保留相同的值</span><br><span class=\"line\">URI.buildQuery(data, true) &#x3D;&#x3D;&#x3D; &quot;foo&#x3D;bar&amp;hello&#x3D;world&amp;hello&#x3D;mars&amp;hello&#x3D;mars&amp;bam&#x3D;&amp;yup&quot;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var uri &#x3D; new URI(&quot;http:&#x2F;&#x2F;user:pass@example.org:80&#x2F;foo&#x2F;hello.html&quot;);</span><br><span class=\"line\">uri.href() &#x3D;&#x3D;&#x3D; &quot;http:&#x2F;&#x2F;user:pass@example.org:80&#x2F;foo&#x2F;hello.html&quot;;</span><br><span class=\"line\">uri.toString() &#x3D;&#x3D;&#x3D; &quot;http:&#x2F;&#x2F;user:pass@example.org:80&#x2F;foo&#x2F;hello.html&quot;;</span><br><span class=\"line\">uri.protocol(); &#x2F;&#x2F; &quot;http&quot;，protocol()别名为scheme()</span><br><span class=\"line\">uri.username(); &#x2F;&#x2F; &quot;user&quot;</span><br><span class=\"line\">uri.password(); &#x2F;&#x2F; &quot;pass&quot;</span><br><span class=\"line\">uri.hostname(); &#x2F;&#x2F; &quot;example.org&quot;，注意，hostname()返回的hostname不包含port</span><br><span class=\"line\">uri.port(); &#x2F;&#x2F; &quot;80&quot;</span><br><span class=\"line\">uri.host(); &#x2F;&#x2F; &quot;example.org:80&quot;</span><br><span class=\"line\">uri.userinfo(); &#x2F;&#x2F; &quot;user:pass&quot;，即username+password</span><br><span class=\"line\">uri.authority(); &#x2F;&#x2F; &quot;user:pass@example.org:80&quot;，即username+password+hostname+port</span><br><span class=\"line\">uri.origin(); &#x2F;&#x2F; &quot;http:&#x2F;&#x2F;user:pass@example.org:80&quot;，即protocol+authority</span><br><span class=\"line\">uri.domain(); &#x2F;&#x2F; &quot;example.org&quot;。如果url是“www.example.org”，那么hostname为“www.example.org”，而domain为“example.org”</span><br><span class=\"line\">uri.subdomain(); &#x2F;&#x2F; &quot;&quot;，如果url是“www.example.org”，那么返回&quot;www&quot;</span><br><span class=\"line\">uri.tld(); &#x2F;&#x2F; &quot;org&quot;</span><br><span class=\"line\">uri.pathname(); &#x2F;&#x2F; &quot;&#x2F;foo&#x2F;hello.html&quot;，pathname()别名为path()</span><br><span class=\"line\">uri.directory(); &#x2F;&#x2F; &quot;&#x2F;foo&quot; 结尾没斜杠</span><br><span class=\"line\">&#x2F;&#x2F;关于特殊字符有以下情况</span><br><span class=\"line\">&#x2F;&#x2F;uri.directory(&quot;&#x2F;hello world&#x2F;&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;uri.directory() &#x3D;&#x3D;&#x3D; &quot;&#x2F;hello%20world&quot;;</span><br><span class=\"line\">&#x2F;&#x2F;uri.directory(true) &#x3D;&#x3D;&#x3D; &quot;&#x2F;hello world&quot;;</span><br><span class=\"line\">uri.filename(); &#x2F;&#x2F; &quot;hello.html&quot; 开头没斜杠</span><br><span class=\"line\">&#x2F;&#x2F;关于特殊字符有以下情况</span><br><span class=\"line\">&#x2F;&#x2F;uri.filename(&quot;hello world.html&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;uri.filename() &#x3D;&#x3D;&#x3D; &quot;hello%20world.html&quot;;</span><br><span class=\"line\">&#x2F;&#x2F;uri.filename(true) &#x3D;&#x3D;&#x3D; &quot;hello world.html&quot;;</span><br><span class=\"line\">uri.suffix(); &#x2F;&#x2F; &quot;html&quot; 开头没“.”</span><br><span class=\"line\">&#x2F;&#x2F;关于特殊字符有以下情况</span><br><span class=\"line\">&#x2F;&#x2F;uri.suffix(&quot;würgh&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;uri.suffix() &#x3D;&#x3D;&#x3D; &quot;w%C3%BCrgh&quot;;</span><br><span class=\"line\">&#x2F;&#x2F;uri.suffix(true) &#x3D;&#x3D;&#x3D; &quot;würgh&quot;;</span><br><span class=\"line\">uri.segment(); &#x2F;&#x2F; 返回[&quot;foo&quot;, &quot;hello.html&quot;]，表示路径的directory</span><br><span class=\"line\">&#x2F;&#x2F;uri.segment([&quot;foo&quot;, &quot;bar&quot;, &quot;foobar.html&quot;]); &#x2F;&#x2F; 将路径设置为http:&#x2F;&#x2F;user:pass@example.org:80&#x2F;foo&#x2F;bar&#x2F;foobar.html</span><br><span class=\"line\">uri.segment(0); &#x2F;&#x2F; 返回&quot;foo&quot;</span><br><span class=\"line\">uri.segmentCoded(); &#x2F;&#x2F; 返回[&quot;foo&quot;, &quot;hello.html&quot;]，功能与segment相同，只是会在返回结果时自动解码</span><br><span class=\"line\"></span><br><span class=\"line\">var result &#x3D; URI.parse(&quot;http:&#x2F;&#x2F;example.org&#x2F;foo.html&quot;);</span><br><span class=\"line\">result &#x3D;&#x3D;&#x3D; &#123;</span><br><span class=\"line\">    protocol: &quot;http&quot;,</span><br><span class=\"line\">    username: null,</span><br><span class=\"line\">    password: null,</span><br><span class=\"line\">    hostname: &quot;example.org&quot;,</span><br><span class=\"line\">    port: null,</span><br><span class=\"line\">    path: &quot;&#x2F;foo.html&quot;,</span><br><span class=\"line\">    query: null,</span><br><span class=\"line\">    fragment: null</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var parts &#x3D; &#123;&#125;;</span><br><span class=\"line\">var result &#x3D; URI.parseAuthority(&quot;user:pass@example.org:8080&#x2F;foo.html&quot;, parts);</span><br><span class=\"line\">result &#x3D;&#x3D;&#x3D; &quot;&#x2F;foo.html&quot;;</span><br><span class=\"line\">parts &#x3D;&#x3D;&#x3D; &#123;</span><br><span class=\"line\">    username: &quot;user&quot;,</span><br><span class=\"line\">    password: &quot;pass&quot;,</span><br><span class=\"line\">    hostname: &quot;example.org&quot;,</span><br><span class=\"line\">    port: &quot;8080&quot;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var parts &#x3D; &#123;&#125;;</span><br><span class=\"line\">var result &#x3D; URI.parseUserinfo(&quot;user:pass@example.org:8080&#x2F;foo.html&quot;, parts);</span><br><span class=\"line\">result &#x3D;&#x3D;&#x3D; &quot;example.org:8080&#x2F;foo.html&quot;;</span><br><span class=\"line\">parts &#x3D;&#x3D;&#x3D; &#123;</span><br><span class=\"line\">    username: &quot;user&quot;,</span><br><span class=\"line\">    password: &quot;pass&quot;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var parts &#x3D; &#123;&#125;;</span><br><span class=\"line\">var result &#x3D; URI.parseHost(&quot;example.org:8080&#x2F;foo.html&quot;, parts);</span><br><span class=\"line\">result &#x3D;&#x3D;&#x3D; &quot;&#x2F;foo.html&quot;;</span><br><span class=\"line\">parts &#x3D;&#x3D;&#x3D; &#123;</span><br><span class=\"line\">    hostname: &quot;example.org&quot;,</span><br><span class=\"line\">    port: &quot;8080&quot;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var result &#x3D; URI.parseQuery(&quot;?foo&#x3D;bar&amp;hello&#x3D;world&amp;hello&#x3D;mars&amp;bam&#x3D;&amp;yup&quot;);</span><br><span class=\"line\">result &#x3D;&#x3D;&#x3D; &#123;</span><br><span class=\"line\">    foo: &quot;bar&quot;,</span><br><span class=\"line\">    hello: [&quot;world&quot;, &quot;mars&quot;],</span><br><span class=\"line\">    bam: &quot;&quot;,</span><br><span class=\"line\">    yup: null</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参数解析\"><a href=\"#参数解析\" class=\"headerlink\" title=\"参数解析\"></a>参数解析</h3><h4 id=\"附带参数解析\"><a href=\"#附带参数解析\" class=\"headerlink\" title=\"? 附带参数解析\"></a><code>?</code> 附带参数解析</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var uri &#x3D; new URI(&quot;http:&#x2F;&#x2F;example.org&#x2F;foo&#x2F;hello.html?foo&#x3D;bar&amp;bar&#x3D;baz&quot;);</span><br><span class=\"line\">uri.search(); &#x2F;&#x2F; 返回&quot;?foo&#x3D;bar&amp;bar&#x3D;baz&quot;，以&quot;?&quot;开头</span><br><span class=\"line\">uri.query(); &#x2F;&#x2F; 返回&quot;foo&#x3D;bar&amp;bar&#x3D;baz&quot;</span><br><span class=\"line\">uri.search(true); &#x2F;&#x2F; 返回&#123; foo: &quot;bar&quot;, bar : &quot;baz&quot; &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"附带参数\"><a href=\"#附带参数\" class=\"headerlink\" title=\"#附带参数\"></a><code>#</code>附带参数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var uri &#x3D; new URI(&quot;http:&#x2F;&#x2F;example.org&#x2F;foo&#x2F;hello.html#world&quot;);</span><br><span class=\"line\">uri.hash(); &#x2F;&#x2F; 返回&quot;#world&quot;，以&quot;#&quot;开头</span><br><span class=\"line\">uri.fragment(); &#x2F;&#x2F; 返回&quot;world&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"附带参数地修改\"><a href=\"#附带参数地修改\" class=\"headerlink\" title=\"?附带参数地修改\"></a><code>?</code>附带参数地修改</h4><blockquote>\n<p>setSearch 是 setQuery 的别称</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var uri &#x3D; new URI(&quot;?hello&#x3D;world&quot;);</span><br><span class=\"line\">uri.setSearch(&quot;hello&quot;, &quot;mars&quot;); &#x2F;&#x2F; 返回一个uri，uri内容为&quot;?hello&#x3D;mars&quot;</span><br><span class=\"line\">uri.setSearch(&#123; foo: &quot;bar&quot;, goodbye : [&quot;world&quot;, &quot;mars&quot;] &#125;);</span><br><span class=\"line\">&#x2F;&#x2F; 返回一个uri，uri内容为&quot;?hello&#x3D;mars&amp;foo&#x3D;bar&amp;goodbye&#x3D;world&amp;goodbye&#x3D;mars&quot;</span><br><span class=\"line\">uri.setSearch(&quot;goodbye&quot;, &quot;sun&quot;);&#x2F;&#x2F; 返回一个uri，uri内容为&quot;?hello&#x3D;mars&amp;foo&#x3D;bar&amp;goodbye&#x3D;sun&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">uri &#x3D; new URI(&quot;?hello&#x3D;world&quot;);</span><br><span class=\"line\">uri.addSearch(&quot;hello&quot;, &quot;mars&quot;); &#x2F;&#x2F; 返回一个uri，uri内容为&quot;?hello&#x3D;world&amp;hello&#x3D;mars&quot;</span><br><span class=\"line\">uri.addSearch(&#123; foo: &quot;bar&quot;, goodbye : [&quot;world&quot;, &quot;mars&quot;] &#125;);</span><br><span class=\"line\">&#x2F;&#x2F; 返回一个uri，uri内容为&quot;?hello&#x3D;world&amp;hello&#x3D;mars&amp;foo&#x3D;bar&amp;goodbye&#x3D;world&amp;goodbye&#x3D;mars&quot;</span><br><span class=\"line\">uri.addSearch(&quot;no-value&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;返回一个uri，uri内容为&quot;?hello&#x3D;world&amp;hello&#x3D;mars&amp;foo&#x3D;bar&amp;goodbye&#x3D;world&amp;goodbye&#x3D;mars&amp;no-value&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">uri &#x3D; new URI(&quot;?hello&#x3D;world&amp;hello&#x3D;mars&amp;foo&#x3D;bar&quot;);</span><br><span class=\"line\">uri.removeSearch(&quot;hello&quot;); &#x2F;&#x2F; 返回一个uri，uri内容为&quot;?foo&#x3D;bar&quot;</span><br><span class=\"line\">uri.search(&quot;?hello&#x3D;world&amp;hello&#x3D;mars&amp;foo&#x3D;bar&quot;);</span><br><span class=\"line\">uri.removeSearch(&quot;hello&quot;, &quot;world&quot;); &#x2F;&#x2F; 返回一个uri，uri内容为&quot;?hello&#x3D;mars&amp;foo&#x3D;bar&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">uri.search(&quot;?hello&#x3D;world&amp;hello&#x3D;mars&amp;foo&#x3D;bar&amp;mine&#x3D;true&quot;);</span><br><span class=\"line\">uri.removeSearch([&quot;hello&quot;, &quot;foo&quot;]); &#x2F;&#x2F; 返回一个uri，uri内容为&quot;?mine&#x3D;true&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">uri.search(&quot;?hello&#x3D;world&amp;hello&#x3D;mars&amp;foo&#x3D;bar&amp;mine&#x3D;true&amp;a&#x3D;1&amp;a&#x3D;2&amp;a&#x3D;3&quot;);</span><br><span class=\"line\">uri.removeSearch(&#123;hello: &quot;world&quot;, foo: undefined, a: [&quot;1&quot;, &quot;3&quot;]&#125;);</span><br><span class=\"line\">&#x2F;&#x2F; 返回一个uri，uri内容为&quot;?hello&#x3D;mars&amp;mine&#x3D;true&amp;a&#x3D;2&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">uri.search(&quot;?foo&#x3D;bar&amp;foo&#x3D;baz&amp;foo&#x3D;bam&amp;obj&#x3D;bam&amp;bar&#x3D;bar&amp;bar&#x3D;baz&amp;bar&#x3D;bam&quot;);</span><br><span class=\"line\">uri.removeSearch(&#39;foo&#39;, &#x2F;[rz]$&#x2F;);</span><br><span class=\"line\">&#x2F;&#x2F; 返回一个uri，uri内容为&quot;?foo&#x3D;bam&amp;obj&#x3D;bam&amp;bar&#x3D;bar&amp;bar&#x3D;baz&amp;bar&#x3D;bam&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"附带参数地判断\"><a href=\"#附带参数地判断\" class=\"headerlink\" title=\"?附带参数地判断\"></a><code>?</code>附带参数地判断</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var uri &#x3D; URI(&quot;?string&#x3D;bar&amp;list&#x3D;one&amp;list&#x3D;two&amp;number&#x3D;123&amp;null&amp;empty&#x3D;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 检查参数是否存在（不管此参数是否有值）</span><br><span class=\"line\">uri.hasQuery(&quot;string&quot;) &#x3D;&#x3D;&#x3D; true;</span><br><span class=\"line\">uri.hasQuery(&quot;nono&quot;) &#x3D;&#x3D;&#x3D; false;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 检查参数的值bool化后为true还是false</span><br><span class=\"line\">uri.hasQuery(&quot;string&quot;, true) &#x3D;&#x3D;&#x3D; true;</span><br><span class=\"line\">uri.hasQuery(&quot;string&quot;, false) &#x3D;&#x3D;&#x3D; false;</span><br><span class=\"line\">uri.hasQuery(&quot;empty&quot;, true) &#x3D;&#x3D;&#x3D; false;</span><br><span class=\"line\">uri.hasQuery(&quot;empty&quot;, false) &#x3D;&#x3D;&#x3D; true;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 检查参数的值是否为指定值</span><br><span class=\"line\">uri.hasQuery(&quot;string&quot;, &quot;bar&quot;) &#x3D;&#x3D;&#x3D; true;</span><br><span class=\"line\">uri.hasQuery(&quot;number&quot;, 123) &#x3D;&#x3D;&#x3D; true;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 检查参数的值是否在给定的列表中</span><br><span class=\"line\">uri.hasQuery(&quot;list&quot;, &quot;two&quot;, true) &#x3D;&#x3D;&#x3D; true;</span><br><span class=\"line\">uri.hasQuery(&quot;list&quot;, [&quot;two&quot;], true) &#x3D;&#x3D;&#x3D; true;</span><br><span class=\"line\">uri.hasQuery(&quot;list&quot;, &quot;three&quot;, true) &#x3D;&#x3D;&#x3D; false;</span><br><span class=\"line\">uri.hasQuery(&quot;list&quot;, [&quot;two&quot;, &quot;three&quot;], true) &#x3D;&#x3D;&#x3D; false;</span><br><span class=\"line\">uri.hasQuery(&quot;list&quot;, &#x2F;ne$&#x2F;, true) &#x3D;&#x3D;&#x3D; true;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 检查参数的值是否符合正则表达式</span><br><span class=\"line\">uri.hasQuery(&quot;string&quot;, &#x2F;ar$&#x2F;) &#x3D;&#x3D;&#x3D; true;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 检查是否有参数的名称符合正则表达式</span><br><span class=\"line\">uri.hasQuery(&#x2F;^str&#x2F;) &#x3D;&#x3D;&#x3D; true;</span><br><span class=\"line\">&#x2F;&#x2F; 检查符合正则表达式的参数的值是否为指定值</span><br><span class=\"line\">uri.hasQuery(&#x2F;^li&#x2F;, &quot;two&quot;) &#x3D;&#x3D;&#x3D; false;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 通过传入方法判断</span><br><span class=\"line\">uri.hasQuery(&quot;string&quot;, function(value, name, data) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; value &#x3D;&#x3D;&#x3D; &quot;bar&quot;;</span><br><span class=\"line\">    &#x2F;&#x2F; name &#x3D;&#x3D;&#x3D; &quot;string&quot;;</span><br><span class=\"line\">    &#x2F;&#x2F; data &#x3D;&#x3D;&#x3D; uri.query(true);</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;) &#x3D;&#x3D;&#x3D; true;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路径转换\"><a href=\"#路径转换\" class=\"headerlink\" title=\"路径转换\"></a>路径转换</h3><blockquote>\n<p>relativeTo()和absoluteTo()可以将路径转换为相对路径/绝对路径。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var uri &#x3D; new URI(&quot;&#x2F;relative&#x2F;path&quot;);</span><br><span class=\"line\">&#x2F;&#x2F; make path relative</span><br><span class=\"line\">var relUri &#x3D; uri.relativeTo(&quot;&#x2F;relative&#x2F;sub&#x2F;foo&#x2F;sub&#x2F;file&quot;); &#x2F;&#x2F; 返回一个uri，uri内容为&quot;..&#x2F;..&#x2F;..&#x2F;path&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var anotherUri &#x3D; relUri.absoluteTo(&quot;&#x2F;relative&#x2F;sub&#x2F;foo&#x2F;sub&#x2F;file&quot;); &#x2F;&#x2F; 返回一个uri，uri内容为&quot;&#x2F;relative&#x2F;path&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URI.commonPath(&quot;&#x2F;foo&#x2F;bar&#x2F;baz.html&quot;, &quot;&#x2F;foo&#x2F;bar&#x2F;world.html&quot;);&#x2F;&#x2F; 返回&quot;&#x2F;foo&#x2F;bar&#x2F;&quot;</span><br><span class=\"line\">URI.joinPaths(&#39;&#x2F;a&#x2F;b&#39;, &#39;&#x2F;c&#39;, &#39;d&#39;, &#39;&#x2F;e&#39;);&#x2F;&#x2F; 返回URI(&quot;&#x2F;a&#x2F;b&#x2F;c&#x2F;d&#x2F;e&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">var data &#x3D; &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">URI.addQuery(data, &quot;hello&quot;, &quot;mars&quot;);</span><br><span class=\"line\">data &#x3D;&#x3D;&#x3D; &#123;hello: &quot;mars&quot;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">URI.addQuery(data, &quot;hello&quot;, &quot;world&quot;);</span><br><span class=\"line\">data &#x3D;&#x3D;&#x3D; &#123;hello: [&quot;mars&quot;, &quot;world&quot;]&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">URI.addQuery(data, &#123;foo: &quot;bar&quot;, goodbye : [&quot;world&quot;, &quot;mars&quot;]&#125;);</span><br><span class=\"line\">data &#x3D;&#x3D;&#x3D; &#123;hello: [&quot;mars&quot;, &quot;world&quot;], foo: &quot;bar&quot;, goodbye : [&quot;world&quot;, &quot;mars&quot;]&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">URI.removeQuery(data, &quot;hello&quot;);</span><br><span class=\"line\">data &#x3D;&#x3D;&#x3D; &#123;foo: &quot;bar&quot;, goodbye : [&quot;world&quot;, &quot;mars&quot;]&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 移除指定值</span><br><span class=\"line\">data &#x3D; &#123;hello: [&quot;world&quot;, &quot;mars&quot;], foo: &quot;bar&quot;&#125;;</span><br><span class=\"line\">URI.removeQuery(data, &quot;hello&quot;, &quot;world&quot;);</span><br><span class=\"line\">data &#x3D;&#x3D;&#x3D; &#123;hello: [&quot;mars&quot;], foo: &quot;bar&quot;&#125; &#x2F;&#x2F; yes, still an array</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 移除多个键</span><br><span class=\"line\">data &#x3D; &#123;hello: [&quot;world&quot;, &quot;mars&quot;], foo: &quot;bar&quot;, mine: &quot;true&quot;&#125;</span><br><span class=\"line\">URI.removeQuery(data, [&quot;hello&quot;, &quot;foo&quot;]);</span><br><span class=\"line\">data &#x3D;&#x3D;&#x3D; &#123;mine: &quot;true&quot;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 移除多个键的指定值</span><br><span class=\"line\">data &#x3D; &#123;hello: [&quot;world&quot;, &quot;mars&quot;], foo: &quot;bar&quot;, mine: &quot;true&quot;, a: [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]&#125;</span><br><span class=\"line\">URI.removeQuery(data, &#123;hello: &quot;world&quot;, foo: undefined, a: [&quot;1&quot;, &quot;3&quot;]&#125;);</span><br><span class=\"line\">data &#x3D;&#x3D;&#x3D; &#123;hello: [&quot;mars&quot;], mine: &quot;true&quot;, a: [&quot;2&quot;]&#125;</span><br></pre></td></tr></table></figure>","text":"URL.js简介URI.js是一个用于处理URL的JavaScript库。可以对URI进行解析， 它提供了一个 jQuery风格 API（Fluent Interface，Method Chaining）来读写所有常规组件和一些方便的方法，如.directory（）和.autho","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"Git","slug":"Git","date":"2020-08-05T04:31:06.000Z","updated":"2021-03-08T09:42:52.358Z","comments":true,"path":"api/articles/Git.json","excerpt":"","keywords":null,"cover":"https://howlcn1997.github.io/2019/09/20/Git/git.png","content":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1><p><img src=\"https://howlcn1997.github.io/2019/09/20/Git/git.png\" alt=\"git\"></p>\n<p><strong>专有名词：</strong></p>\n<blockquote>\n<ul>\n<li>Workspace：工作区</li>\n<li>Index / Stage：暂存区</li>\n<li>Repository：仓库区（或本地仓库）</li>\n<li>Remote：远程仓库</li>\n</ul>\n</blockquote>\n<h2 id=\"快速使用\"><a href=\"#快速使用\" class=\"headerlink\" title=\"快速使用\"></a>快速使用</h2><p>代码拉取</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone + Git仓库的地址</span><br></pre></td></tr></table></figure>\n\n<p>切换分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -a  &#x2F;&#x2F;查看分支</span><br><span class=\"line\">$ git checkout -b dev-0930 origin&#x2F;dev-0930  &#x2F;&#x2F;切换分支</span><br></pre></td></tr></table></figure>\n\n<p>代码提交</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status   &#x2F;&#x2F;查看已修改文件</span><br><span class=\"line\">$ git add .    &#x2F;&#x2F;提交到暂存区</span><br><span class=\"line\">$ git commit -m &quot;更新描述&quot;    &#x2F;&#x2F;提交到本地仓库</span><br><span class=\"line\">$ git pull     &#x2F;&#x2F;拉取</span><br><span class=\"line\">$ git push     &#x2F;&#x2F;提交到远程仓库</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Git命令\"><a href=\"#Git命令\" class=\"headerlink\" title=\"Git命令\"></a>Git命令</h2><h3 id=\"新建代码库\"><a href=\"#新建代码库\" class=\"headerlink\" title=\"新建代码库\"></a>新建代码库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在当前目录新建一个Git代码库</span><br><span class=\"line\">$ git init</span><br><span class=\"line\"> </span><br><span class=\"line\"># 新建一个目录，将其初始化为Git代码库</span><br><span class=\"line\">$ git init [project-name]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 下载一个项目和它的整个代码历史</span><br><span class=\"line\">$ git clone [url]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 显示当前的Git配置</span><br><span class=\"line\">$ git config --list</span><br><span class=\"line\"> </span><br><span class=\"line\"># 编辑Git配置文件</span><br><span class=\"line\">$ git config -e [--global]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 设置提交代码时的用户信息</span><br><span class=\"line\">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class=\"line\">$ git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"增加-删除文件\"><a href=\"#增加-删除文件\" class=\"headerlink\" title=\"增加/删除文件\"></a>增加/删除文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 添加指定文件到暂存区</span><br><span class=\"line\">$ git add [file1] [file2] ...</span><br><span class=\"line\"> </span><br><span class=\"line\"># 添加指定目录到暂存区，包括子目录</span><br><span class=\"line\">$ git add [dir]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 添加当前目录的所有文件到暂存区</span><br><span class=\"line\">$ git add .</span><br><span class=\"line\"> </span><br><span class=\"line\"># 添加每个变化前，都会要求确认</span><br><span class=\"line\"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class=\"line\">$ git add -p</span><br><span class=\"line\"> </span><br><span class=\"line\"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class=\"line\">$ git rm [file1] [file2] ...</span><br><span class=\"line\"> </span><br><span class=\"line\"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class=\"line\">$ git rm --cached [file]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 改名文件，并且将这个改名放入暂存区</span><br><span class=\"line\">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码的提交\"><a href=\"#代码的提交\" class=\"headerlink\" title=\"代码的提交\"></a>代码的提交</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 提交暂存区到仓库区</span><br><span class=\"line\">$ git commit -m [message]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 提交暂存区的指定文件到仓库区</span><br><span class=\"line\">$ git commit [file1] [file2] ... -m [message]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class=\"line\">$ git commit -a</span><br><span class=\"line\"> </span><br><span class=\"line\"># 提交时显示所有diff信息</span><br><span class=\"line\">$ git commit -v</span><br><span class=\"line\"> </span><br><span class=\"line\"># 使用一次新的commit，替代上一次提交</span><br><span class=\"line\"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class=\"line\">$ git commit --amend -m [message]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 重做上一次commit，并包括指定文件的新变化</span><br><span class=\"line\">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 列出所有本地分支</span><br><span class=\"line\">$ git branch</span><br><span class=\"line\"> </span><br><span class=\"line\"># 列出所有远程分支</span><br><span class=\"line\">$ git branch -r</span><br><span class=\"line\"> </span><br><span class=\"line\"># 列出所有本地分支和远程分支</span><br><span class=\"line\">$ git branch -a</span><br><span class=\"line\"> </span><br><span class=\"line\"># 新建一个分支，但依然停留在当前分支</span><br><span class=\"line\">$ git branch [branch-name]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 新建一个分支，并切换到该分支</span><br><span class=\"line\">$ git checkout -b [branch]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 新建一个分支，指向指定commit</span><br><span class=\"line\">$ git branch [branch] [commit]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class=\"line\">$ git branch --track [branch] [remote-branch]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 切换到指定分支，并更新工作区</span><br><span class=\"line\">$ git checkout [branch-name]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 切换到上一个分支</span><br><span class=\"line\">$ git checkout -</span><br><span class=\"line\"> </span><br><span class=\"line\"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class=\"line\">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 合并指定分支到当前分支</span><br><span class=\"line\">$ git merge [branch]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 选择一个commit，合并进当前分支</span><br><span class=\"line\">$ git cherry-pick [commit]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 删除分支</span><br><span class=\"line\">$ git branch -d [branch-name]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 删除远程分支</span><br><span class=\"line\">$ git push origin --delete [branch-name]</span><br><span class=\"line\">$ git branch -dr [remote&#x2F;branch]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 列出所有tag</span><br><span class=\"line\">$ git tag</span><br><span class=\"line\"> </span><br><span class=\"line\"># 新建一个tag在当前commit</span><br><span class=\"line\">$ git tag [tag]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 新建一个tag在指定commit</span><br><span class=\"line\">$ git tag [tag] [commit]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 删除本地tag</span><br><span class=\"line\">$ git tag -d [tag]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 删除远程tag</span><br><span class=\"line\">$ git push origin :refs&#x2F;tags&#x2F;[tagName]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 查看tag信息</span><br><span class=\"line\">$ git show [tag]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 提交指定tag</span><br><span class=\"line\">$ git push [remote] [tag]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 提交所有tag</span><br><span class=\"line\">$ git push [remote] --tags</span><br><span class=\"line\"> </span><br><span class=\"line\"># 新建一个分支，指向某个tag</span><br><span class=\"line\">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 显示有变更的文件</span><br><span class=\"line\">$ git status</span><br><span class=\"line\"> </span><br><span class=\"line\"># 显示当前分支的版本历史</span><br><span class=\"line\">$ git log</span><br><span class=\"line\"> </span><br><span class=\"line\"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class=\"line\">$ git log --stat</span><br><span class=\"line\"> </span><br><span class=\"line\"># 搜索提交历史，根据关键词</span><br><span class=\"line\">$ git log -S [keyword]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class=\"line\">$ git log [tag] HEAD --pretty&#x3D;format:%s</span><br><span class=\"line\"> </span><br><span class=\"line\"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class=\"line\">$ git log [tag] HEAD --grep feature</span><br><span class=\"line\"> </span><br><span class=\"line\"># 显示某个文件的版本历史，包括文件改名</span><br><span class=\"line\">$ git log --follow [file]</span><br><span class=\"line\">$ git whatchanged [file]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 显示指定文件相关的每一次diff</span><br><span class=\"line\">$ git log -p [file]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 显示过去5次提交</span><br><span class=\"line\">$ git log -5 --pretty --oneline</span><br><span class=\"line\"> </span><br><span class=\"line\"># 显示所有提交过的用户，按提交次数排序</span><br><span class=\"line\">$ git shortlog -sn</span><br><span class=\"line\"> </span><br><span class=\"line\"># 显示指定文件是什么人在什么时间修改过</span><br><span class=\"line\">$ git blame [file]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 显示暂存区和工作区的差异</span><br><span class=\"line\">$ git diff</span><br><span class=\"line\"> </span><br><span class=\"line\"># 显示暂存区和上一个commit的差异</span><br><span class=\"line\">$ git diff --cached [file]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 显示工作区与当前分支最新commit之间的差异</span><br><span class=\"line\">$ git diff HEAD</span><br><span class=\"line\"> </span><br><span class=\"line\"># 显示两次提交之间的差异</span><br><span class=\"line\">$ git diff [first-branch]...[second-branch]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 显示今天你写了多少行代码</span><br><span class=\"line\">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\"># 显示某次提交的元数据和内容变化</span><br><span class=\"line\">$ git show [commit]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 显示某次提交发生变化的文件</span><br><span class=\"line\">$ git show --name-only [commit]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 显示某次提交时，某个文件的内容</span><br><span class=\"line\">$ git show [commit]:[filename]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 显示当前分支的最近几次提交</span><br><span class=\"line\">$ git reflog</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"远程同步\"><a href=\"#远程同步\" class=\"headerlink\" title=\"远程同步\"></a>远程同步</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 下载远程仓库的所有变动</span><br><span class=\"line\">$ git fetch [remote]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 显示所有远程仓库</span><br><span class=\"line\">$ git remote -v</span><br><span class=\"line\"> </span><br><span class=\"line\"># 显示某个远程仓库的信息</span><br><span class=\"line\">$ git remote show [remote]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 增加一个新的远程仓库，并命名</span><br><span class=\"line\">$ git remote add [shortname] [url]</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新分支  （当远程创建新的分支后）</span><br><span class=\"line\">$ git remote update origin --prune</span><br><span class=\"line\"> </span><br><span class=\"line\"># 取回远程仓库的变化，并与本地分支合并</span><br><span class=\"line\">$ git pull [remote] [branch]    &#x2F;&#x2F;相当于git pull &#x3D; git fetch + git merge，这样可能会产生冲突，需要手动解决。</span><br><span class=\"line\"> </span><br><span class=\"line\"># 上传本地指定分支到远程仓库</span><br><span class=\"line\">$ git push [remote] [branch]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class=\"line\">$ git push [remote] --force</span><br><span class=\"line\"> </span><br><span class=\"line\"># 推送所有分支到远程仓库</span><br><span class=\"line\">$ git push [remote] --all</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 恢复暂存区的指定文件到工作区</span><br><span class=\"line\">$ git checkout [file]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class=\"line\">$ git checkout [commit] [file]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 恢复暂存区的所有文件到工作区</span><br><span class=\"line\">$ git checkout .</span><br><span class=\"line\"> </span><br><span class=\"line\"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class=\"line\">$ git reset [file]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class=\"line\">$ git reset --hard</span><br><span class=\"line\"> </span><br><span class=\"line\"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class=\"line\">$ git reset [commit]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class=\"line\">$ git reset --hard [commit]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class=\"line\">$ git reset --keep [commit]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 新建一个commit，用来撤销指定commit</span><br><span class=\"line\"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class=\"line\">$ git revert [commit]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 暂时将未提交的变化移除，稍后再移入</span><br><span class=\"line\">$ git stash</span><br><span class=\"line\">$ git stash pop</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 生成一个可供发布的压缩包</span><br><span class=\"line\">$ git archive</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置忽略上传文件\"><a href=\"#设置忽略上传文件\" class=\"headerlink\" title=\"设置忽略上传文件\"></a>设置忽略上传文件</h3><p>1、项目中生成<code>.gitignoe</code>文件</p>\n<p>Git Bash 输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ touch .gitignoe</span><br></pre></td></tr></table></figure>\n\n<p>2、配置.gitignoe</p>\n<p>如：忽略上传node_module</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;node_modules</span><br></pre></td></tr></table></figure>\n\n<p>3、常用规则</p>\n<ol>\n<li><code>/mtk/</code>过滤整个文件夹</li>\n<li><code>*.zip</code>过滤所有.zip文件</li>\n<li><code>/mtk/do.c</code>过滤某个具体文件</li>\n</ol>\n<p>配置语法</p>\n<ol>\n<li>以斜杠“/”开头表示目录；</li>\n<li>以星号“*”通配多个字符；</li>\n<li>以问号“?”通配单个字符</li>\n<li>以方括号“[]”包含单个字符的匹配列表；</li>\n<li>以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；</li>\n</ol>\n<p>此外： git 对于 .ignore 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效；</p>\n<p>如果你不慎在创建.gitignore文件之前就push了项目，那么即使你在.gitignore文件中写入新的过滤规则，这些规则也不会起作用，Git仍然会对所有文件进行版本管理。<br>简单来说，出现这种问题的原因就是Git已经开始管理这些文件了，所以你无法再通过过滤规则过滤它们。因此一定要养成在项目开始就创建.gitignore文件的习惯，否则一旦push，处理起来会非常麻烦</p>\n<h2 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h2><p><strong>每次项目开发之前要保证项目是最新的版本</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull   &#x2F;&#x2F;从仓库中拉取最新代码合并到本地代码中</span><br></pre></td></tr></table></figure>\n\n<p><strong>项目开发不要在master中开发，切换到已有分支，或者新建分支</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 切换到指定分支，并更新工作区</span><br><span class=\"line\">$ git checkout [branch-name]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>开发分支</p>\n<p>（本地分支）</p>\n<blockquote>\n<h4 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h4><p>hotfix-上线日期<br>如：hotfix-20190926</p>\n</blockquote>\n<p>新建本地提测分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 新建一个分支，并切换到该分支</span><br><span class=\"line\">$ git checkout -b hotfix-20190926</span><br></pre></td></tr></table></figure>\n\n<p>将本地分支关联到远程提测分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch --set-upstream-to&#x3D;远程分支名 本地分支名</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;如：$ git branch --set-upstream-to&#x3D;origin&#x2F;hotfix-20190926 hotfix-20190926</span><br></pre></td></tr></table></figure>\n\n<p>将已修改的代码提交</p>\n<p><strong>提测分支</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;命名规则</span><br><span class=\"line\">release&#x2F;日期</span><br><span class=\"line\">如：release&#x2F;20190926</span><br></pre></td></tr></table></figure>\n\n<p>本地若有release/20190926且关联了远程仓库分支则无需新建</p>\n<p>若没有，</p>\n<p>新建本地分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b release&#x2F;20190926</span><br></pre></td></tr></table></figure>\n\n<p>本地分支关联到远程分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;如：$ git branch --set-upstream-to&#x3D;origin&#x2F;release&#x2F;20190926 release&#x2F;20190926</span><br></pre></td></tr></table></figure>\n\n<p>拉取远程代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure>\n\n<p>将本地开发分支中已修改的代码合并到本地提测分支中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge release&#x2F;20190926</span><br></pre></td></tr></table></figure>\n\n<p>将本地提测分支中的代码提交到远程提测分支中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push</span><br></pre></td></tr></table></figure>\n\n<p>若项目中安装了<code>commitlint/cli</code>和<code>commitlint/config-conventional</code></p>\n<blockquote>\n<p>这是对git commit -m 中的desc做限制 写描述时要遵循声明的规则</p>\n<p>规则一般写在 README.md中</p>\n</blockquote>\n<p>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### git commit message 规范</span><br><span class=\"line\">提交commit代码格式：</span><br><span class=\"line\">git commit -m &lt;type&gt;[optional scope]: &lt;description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">type ：用于表明我们这次提交的改动类型，是新增了功能？还是修改了测试代码？又或者是更新了文档？总结以下 11 种类型：</span><br><span class=\"line\">- build：主要目的是修改项目构建系统(例如 glup，webpack，rollup 的配置等)的提交</span><br><span class=\"line\">- ci：主要目的是修改项目继续集成流程(例如 Travis，Jenkins，GitLab CI，Circle等)的提交</span><br><span class=\"line\">- docs：文档更新</span><br><span class=\"line\">- feat：新增功能</span><br><span class=\"line\">- fix：bug 修复</span><br><span class=\"line\">- perf：性能优化</span><br><span class=\"line\">- refactor：重构代码(既没有新增功能，也没有修复 bug)</span><br><span class=\"line\">- style：不影响程序逻辑的代码修改(修改空白字符，补全缺失的分号等)</span><br><span class=\"line\">- test：新增测试用例或是更新现有测试</span><br><span class=\"line\">- revert：回滚某个更早之前的提交</span><br><span class=\"line\">- chore：不属于以上类型的其他类型(日常事务)</span><br><span class=\"line\"></span><br><span class=\"line\">optional scope：一个可选的修改范围。用于标识此次提交主要涉及到代码中哪个模块。</span><br><span class=\"line\"></span><br><span class=\"line\">description：一句话描述此次提交的主要内容，做到言简意赅。</span><br></pre></td></tr></table></figure>","text":"Git [Figure] ","link":"","raw":null,"photos":[],"categories":[],"tags":[]}]}