{"title":"Hello React","slug":"Hello React","date":"2020-07-02T05:24:49.000Z","updated":"2021-03-08T09:42:58.156Z","comments":true,"path":"api/articles/Hello React.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>至今一直在使用公司的脚手架或者<code>create-react-app</code>来构建React项目，使用的时间越长，就对于这种<code>理所当然</code>感到疑惑，遂决定利用<code>webpack</code>手动构建一个react项目。</p>\n<h2 id=\"简述webpack\"><a href=\"#简述webpack\" class=\"headerlink\" title=\"简述webpack\"></a>简述webpack</h2><blockquote>\n<p>本质上，<em>webpack</em> 是一个现代 JavaScript 应用程序的*静态模块打包器(module bundler)<em>。当 webpack 处理应用程序时，它会递归地构建一个</em>依赖关系图(dependency graph)*，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 <em>bundle</em></p>\n</blockquote>\n<p>核心概念</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry &#x2F;&#x2F; webpack进行静态分析的入口文件</span><br><span class=\"line\"></span><br><span class=\"line\">output &#x2F;&#x2F; webpack打包后输出的目标文件</span><br><span class=\"line\"></span><br><span class=\"line\">loader &#x2F;&#x2F; 静态分析时对不同文件使用不同的loader进行处理</span><br><span class=\"line\"></span><br><span class=\"line\">plugins &#x2F;&#x2F; 从分析的开始到结束，以完成loader职能之外的工作</span><br></pre></td></tr></table></figure>\n\n<p>简述整个过程：由入口文件开始分析，根据其依赖模块顺藤摸瓜找到不同的文件，并对不同的文件进行<code>loader</code>处理，此期间<code>plugin</code>做相应工作（如：代码压缩，打包优化，修改环境变量等），打包结果输出到<code>output</code>指定的目标文件。</p>\n<h2 id=\"Todo\"><a href=\"#Todo\" class=\"headerlink\" title=\"Todo\"></a>Todo</h2><h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 创建文件夹</span><br><span class=\"line\">mkdir hello-react</span><br><span class=\"line\">cd hello-react</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 初识化npm项目   -y 使用默认package.json</span><br><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构建项目目录框架\"><a href=\"#构建项目目录框架\" class=\"headerlink\" title=\"构建项目目录框架\"></a>构建项目目录框架</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── build                  开发打包资源</span><br><span class=\"line\">├── dist                   线上打包资源</span><br><span class=\"line\">├── public                 公共资源</span><br><span class=\"line\">├── src                    源码目录</span><br><span class=\"line\">|    └──index.js\t\t  入口文件</span><br><span class=\"line\">└── package.json</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; &#x2F;src&#x2F;index.js</span><br><span class=\"line\">console.log(&quot;hello world&quot;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装webpack\"><a href=\"#安装webpack\" class=\"headerlink\" title=\"安装webpack\"></a>安装webpack</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; -D 是--save-dev的简写   -S 是--save的简写</span><br><span class=\"line\">npm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure>\n\n<p>此时简单运行一下，终端输入<code>webpack</code>，此时dist中会生成一个<code>main.js</code>文件。</p>\n<p>这是因为<code>webpack</code>会有默认的打包配置（入口文件为<code>/src/index.js</code>，输入文件为<code>/dist/main.js</code>）。</p>\n<p>运行一下<code>main.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node .&#x2F;dist&#x2F;main.js</span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n\n<p>当然你可以使用自己的<code>webpack</code>配置以覆盖默认配置</p>\n<h2 id=\"webpack-config-js\"><a href=\"#webpack-config-js\" class=\"headerlink\" title=\"webpack.config.js\"></a>webpack.config.js</h2><h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><p>在项目根目录下创建<code>webpack.config.js</code>，<code>webpack</code>默认会在项目根目录下寻找<code>webpack.config.js</code>以覆盖默认配置，当然，你也可以指定任意路径，只需要</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack --config [配置文件的目标路径]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; node中的核心模块，用于文件路径处理</span><br><span class=\"line\">const path &#x3D; require(&quot;path&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    entry: path.join(__dirname,&#39;.&#x2F;src&#x2F;index.js&#39;),</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.join(__dirname, &quot;.&#x2F;build&quot;),</span><br><span class=\"line\">        filename:&quot;main.js&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#x2F;&#x2F; 定义当前打包环境</span><br><span class=\"line\">    mode: &quot;development&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"写React\"><a href=\"#写React\" class=\"headerlink\" title=\"写React\"></a>写React</h2><p>之前只是简单的执行了打印语句，并没有<code>dom</code>操作，接下来开始使用<code>React</code>，写我们最爱的<code>JSX</code>。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i react react-dom -S</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"支持\"><a href=\"#支持\" class=\"headerlink\" title=\"支持\"></a>支持</h3><p>webpack本身是不识别JSX的，这里需要借助相应loader</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i babel-loader @babel&#x2F;core @babel&#x2F;preset-env @babel&#x2F;preset-react   -S</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"webpack配置\"><a href=\"#webpack配置\" class=\"headerlink\" title=\"webpack配置\"></a>webpack配置</h4><blockquote>\n<p>在顺藤摸瓜的过程中若碰到 <code>.js</code> <code>.jsx</code>则启用<code>babel-loader</code></p>\n<p>而babel就会去查询相应babel配置【<code>.babelrc</code>】做出相应<code>transfrom</code></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; webpack.config.js</span><br><span class=\"line\">module:&#123;</span><br><span class=\"line\">    rules: [&#123;</span><br><span class=\"line\">        test: &#x2F;\\.(js|jsx)$&#x2F;,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">            loader: &quot;babel-loader&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"babel配置\"><a href=\"#babel配置\" class=\"headerlink\" title=\"babel配置\"></a>babel配置</h4><p>在项目根目录中新建babel的配置文件<code>.babelrc</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; .babelrc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;presets&quot;: [</span><br><span class=\"line\">        [</span><br><span class=\"line\">            &quot;@babel&#x2F;preset-env&quot;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;useBuiltIns&quot;: &quot;usage&quot; &#x2F;&#x2F;按需注⼊polyfill</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        &quot;@babel&#x2F;preset-react&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关于<code>@babel/preset-env</code>的配置详情，请见<a href=\"https://zhuanlan.zhihu.com/p/84799735\">Babel7 中 @babel/preset-env 的使用</a> 和 <a href=\"https://www.babeljs.cn/docs/babel-preset-env\">babeljs.cn</a></p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; &#x2F;src&#x2F;index.js</span><br><span class=\"line\">import React from &quot;react&quot;;</span><br><span class=\"line\">import ReactDOM from &quot;react-dom&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">function App() &#123;</span><br><span class=\"line\">    return &lt;div&gt;Hello React&lt;&#x2F;div&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ReactDOM.render(&lt;App &#x2F;&gt;, document.getElementById(&quot;root&quot;));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HTML宿主\"><a href=\"#HTML宿主\" class=\"headerlink\" title=\"HTML宿主\"></a>HTML宿主</h3><p>目前我们将打包后的代码输出到 <code>/build/main.js</code>，那我们就在<code>/build</code>下新建<code>index.html</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">        &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class=\"line\">        &lt;title&gt;Hello React&lt;&#x2F;title&gt;</span><br><span class=\"line\">    &lt;&#x2F;head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;div id&#x3D;&quot;root&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;.&#x2F;main.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">    &lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>完成后，用浏览器打开<code>index.html</code></p>\n<p>至此初步完成了<code>webpack搭建React项目</code>的任务</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本篇文章用到的npm包：</p>\n<ol>\n<li>webpack</li>\n<li>webpack-cli</li>\n<li>babel-loader</li>\n<li>@babel/core</li>\n<li>@babel/preset-env</li>\n<li>@babel/preset-react</li>\n<li>react</li>\n<li>react-dom</li>\n</ol>\n","categories":[],"tags":[]}